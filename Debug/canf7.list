
canf7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a10  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d2c  08005d2c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d34  08005d34  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d34  08005d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005d3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  20000060  08005d9c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08005d9c  000073e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c173  00000000  00000000  0000708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c43  00000000  00000000  00013201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f0  00000000  00000000  00014e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d6  00000000  00000000  00015738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002728e  00000000  00000000  00015e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2c9  00000000  00000000  0003d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3bc2  00000000  00000000  00049365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cf27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002920  00000000  00000000  0013cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0013f88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	08005bf8 	.word	0x08005bf8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	08005bf8 	.word	0x08005bf8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e6:	f000 fda9 	bl	800113c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 ffbc 	bl	8001566 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 fb2b 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fc1b 	bl	8000e2c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005f6:	f000 fb83 	bl	8000d00 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80005fa:	f000 fbb7 	bl	8000d6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 fbe5 	bl	8000dcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  canfil.FilterBank = 0;
 8000602:	4b3b      	ldr	r3, [pc, #236]	@ (80006f0 <main+0x110>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8000608:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <main+0x110>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  canfil.FilterFIFOAssignment = CAN_RX_FIFO0;
 800060e:	4b38      	ldr	r3, [pc, #224]	@ (80006f0 <main+0x110>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  canfil.FilterIdHigh = 0;
 8000614:	4b36      	ldr	r3, [pc, #216]	@ (80006f0 <main+0x110>)
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
  canfil.FilterIdLow = 0;
 800061a:	4b35      	ldr	r3, [pc, #212]	@ (80006f0 <main+0x110>)
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  canfil.FilterMaskIdHigh = 0;
 8000620:	4b33      	ldr	r3, [pc, #204]	@ (80006f0 <main+0x110>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  canfil.FilterMaskIdLow = 0;
 8000626:	4b32      	ldr	r3, [pc, #200]	@ (80006f0 <main+0x110>)
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800062c:	4b30      	ldr	r3, [pc, #192]	@ (80006f0 <main+0x110>)
 800062e:	2201      	movs	r2, #1
 8000630:	61da      	str	r2, [r3, #28]
  canfil.FilterActivation = ENABLE;
 8000632:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <main+0x110>)
 8000634:	2201      	movs	r2, #1
 8000636:	621a      	str	r2, [r3, #32]
  canfil.SlaveStartFilterBank = 14;
 8000638:	4b2d      	ldr	r3, [pc, #180]	@ (80006f0 <main+0x110>)
 800063a:	220e      	movs	r2, #14
 800063c:	625a      	str	r2, [r3, #36]	@ 0x24

  txHeader.DLC = 8;
 800063e:	4b2d      	ldr	r3, [pc, #180]	@ (80006f4 <main+0x114>)
 8000640:	2208      	movs	r2, #8
 8000642:	611a      	str	r2, [r3, #16]
  txHeader.IDE = CAN_ID_EXT;
 8000644:	4b2b      	ldr	r3, [pc, #172]	@ (80006f4 <main+0x114>)
 8000646:	2204      	movs	r2, #4
 8000648:	609a      	str	r2, [r3, #8]
  txHeader.RTR = CAN_RTR_DATA;
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <main+0x114>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  txHeader.StdId = 0x030;
 8000650:	4b28      	ldr	r3, [pc, #160]	@ (80006f4 <main+0x114>)
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	601a      	str	r2, [r3, #0]
  txHeader.ExtId = 0x02;
 8000656:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <main+0x114>)
 8000658:	2202      	movs	r2, #2
 800065a:	605a      	str	r2, [r3, #4]
  txHeader.TransmitGlobalTime = DISABLE;
 800065c:	4b25      	ldr	r3, [pc, #148]	@ (80006f4 <main+0x114>)
 800065e:	2200      	movs	r2, #0
 8000660:	751a      	strb	r2, [r3, #20]
  HAL_CAN_ConfigFilter(&hcan1,&canfil);
 8000662:	4923      	ldr	r1, [pc, #140]	@ (80006f0 <main+0x110>)
 8000664:	4824      	ldr	r0, [pc, #144]	@ (80006f8 <main+0x118>)
 8000666:	f001 f8fb 	bl	8001860 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 800066a:	4823      	ldr	r0, [pc, #140]	@ (80006f8 <main+0x118>)
 800066c:	f001 f9e4 	bl	8001a38 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000670:	2102      	movs	r1, #2
 8000672:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <main+0x118>)
 8000674:	f001 fb46 	bl	8001d04 <HAL_CAN_ActivateNotification>
  HAL_UART_Receive_IT(&huart2, coming_message, sizeof(coming_message));
 8000678:	2201      	movs	r2, #1
 800067a:	4920      	ldr	r1, [pc, #128]	@ (80006fc <main+0x11c>)
 800067c:	4820      	ldr	r0, [pc, #128]	@ (8000700 <main+0x120>)
 800067e:	f003 fac7 	bl	8003c10 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (message_ready)
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <main+0x124>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d016      	beq.n	80006ba <main+0xda>
	  {
	  // Process the message
	  HAL_UART_Transmit_IT(&huart1, (uint8_t*)buffer, strlen(buffer));
 800068c:	481e      	ldr	r0, [pc, #120]	@ (8000708 <main+0x128>)
 800068e:	f7ff fdd7 	bl	8000240 <strlen>
 8000692:	4603      	mov	r3, r0
 8000694:	b29b      	uxth	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	491b      	ldr	r1, [pc, #108]	@ (8000708 <main+0x128>)
 800069a:	481c      	ldr	r0, [pc, #112]	@ (800070c <main+0x12c>)
 800069c:	f003 fa5a 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80006a0:	bf00      	nop
 80006a2:	481a      	ldr	r0, [pc, #104]	@ (800070c <main+0x12c>)
 80006a4:	f003 fe0a 	bl	80042bc <HAL_UART_GetState>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b20      	cmp	r3, #32
 80006ac:	d1f9      	bne.n	80006a2 <main+0xc2>
// Reset buffer and flag
	  buffer_index = 0;
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <main+0x130>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	801a      	strh	r2, [r3, #0]
	  message_ready = 0;
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <main+0x124>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
	  }
	  if(controller_temp >=26)
 80006ba:	4b16      	ldr	r3, [pc, #88]	@ (8000714 <main+0x134>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	2b19      	cmp	r3, #25
 80006c0:	d92e      	bls.n	8000720 <main+0x140>
	  {
		  sprintf((char*)myfanmessage,"ON\n");
 80006c2:	4915      	ldr	r1, [pc, #84]	@ (8000718 <main+0x138>)
 80006c4:	4815      	ldr	r0, [pc, #84]	@ (800071c <main+0x13c>)
 80006c6:	f004 fdf7 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart2, myfanmessage, strlen((char*)myfanmessage));
 80006ca:	4814      	ldr	r0, [pc, #80]	@ (800071c <main+0x13c>)
 80006cc:	f7ff fdb8 	bl	8000240 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	4911      	ldr	r1, [pc, #68]	@ (800071c <main+0x13c>)
 80006d8:	4809      	ldr	r0, [pc, #36]	@ (8000700 <main+0x120>)
 80006da:	f003 fa3b 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80006de:	bf00      	nop
 80006e0:	480a      	ldr	r0, [pc, #40]	@ (800070c <main+0x12c>)
 80006e2:	f003 fdeb 	bl	80042bc <HAL_UART_GetState>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b20      	cmp	r3, #32
 80006ea:	d1f9      	bne.n	80006e0 <main+0x100>
 80006ec:	e02d      	b.n	800074a <main+0x16a>
 80006ee:	bf00      	nop
 80006f0:	200001f0 	.word	0x200001f0
 80006f4:	200001d0 	.word	0x200001d0
 80006f8:	2000007c 	.word	0x2000007c
 80006fc:	20000274 	.word	0x20000274
 8000700:	2000012c 	.word	0x2000012c
 8000704:	2000028e 	.word	0x2000028e
 8000708:	20000278 	.word	0x20000278
 800070c:	200000a4 	.word	0x200000a4
 8000710:	2000028c 	.word	0x2000028c
 8000714:	20000220 	.word	0x20000220
 8000718:	08005c10 	.word	0x08005c10
 800071c:	20000260 	.word	0x20000260
	  }
	  else
	  {
		  sprintf((char*)myfanmessage,"OFF\n");
 8000720:	49b5      	ldr	r1, [pc, #724]	@ (80009f8 <main+0x418>)
 8000722:	48b6      	ldr	r0, [pc, #728]	@ (80009fc <main+0x41c>)
 8000724:	f004 fdc8 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart2, myfanmessage, strlen((char*)myfanmessage));
 8000728:	48b4      	ldr	r0, [pc, #720]	@ (80009fc <main+0x41c>)
 800072a:	f7ff fd89 	bl	8000240 <strlen>
 800072e:	4603      	mov	r3, r0
 8000730:	b29b      	uxth	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	49b1      	ldr	r1, [pc, #708]	@ (80009fc <main+0x41c>)
 8000736:	48b2      	ldr	r0, [pc, #712]	@ (8000a00 <main+0x420>)
 8000738:	f003 fa0c 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 800073c:	bf00      	nop
 800073e:	48b1      	ldr	r0, [pc, #708]	@ (8000a04 <main+0x424>)
 8000740:	f003 fdbc 	bl	80042bc <HAL_UART_GetState>
 8000744:	4603      	mov	r3, r0
 8000746:	2b20      	cmp	r3, #32
 8000748:	d1f9      	bne.n	800073e <main+0x15e>
	  }


	  speed = ((rotating_speed/100)*1.23);
 800074a:	4baf      	ldr	r3, [pc, #700]	@ (8000a08 <main+0x428>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	4aaf      	ldr	r2, [pc, #700]	@ (8000a0c <main+0x42c>)
 8000750:	fba2 2303 	umull	r2, r3, r2, r3
 8000754:	095b      	lsrs	r3, r3, #5
 8000756:	b29b      	uxth	r3, r3
 8000758:	ee07 3a90 	vmov	s15, r3
 800075c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000760:	ed9f 6b9f 	vldr	d6, [pc, #636]	@ 80009e0 <main+0x400>
 8000764:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000768:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800076c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000770:	793b      	ldrb	r3, [r7, #4]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4ba6      	ldr	r3, [pc, #664]	@ (8000a10 <main+0x430>)
 8000776:	701a      	strb	r2, [r3, #0]
	  sprintf((char*)myMessage,"speed.val=%d",speed);
 8000778:	4ba5      	ldr	r3, [pc, #660]	@ (8000a10 <main+0x430>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	49a5      	ldr	r1, [pc, #660]	@ (8000a14 <main+0x434>)
 8000780:	48a5      	ldr	r0, [pc, #660]	@ (8000a18 <main+0x438>)
 8000782:	f004 fd99 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000786:	48a4      	ldr	r0, [pc, #656]	@ (8000a18 <main+0x438>)
 8000788:	f7ff fd5a 	bl	8000240 <strlen>
 800078c:	4603      	mov	r3, r0
 800078e:	b29b      	uxth	r3, r3
 8000790:	461a      	mov	r2, r3
 8000792:	49a1      	ldr	r1, [pc, #644]	@ (8000a18 <main+0x438>)
 8000794:	489b      	ldr	r0, [pc, #620]	@ (8000a04 <main+0x424>)
 8000796:	f003 f9dd 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 800079a:	bf00      	nop
 800079c:	4899      	ldr	r0, [pc, #612]	@ (8000a04 <main+0x424>)
 800079e:	f003 fd8d 	bl	80042bc <HAL_UART_GetState>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b20      	cmp	r3, #32
 80007a6:	d1f9      	bne.n	800079c <main+0x1bc>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 80007a8:	2203      	movs	r2, #3
 80007aa:	499c      	ldr	r1, [pc, #624]	@ (8000a1c <main+0x43c>)
 80007ac:	4895      	ldr	r0, [pc, #596]	@ (8000a04 <main+0x424>)
 80007ae:	f003 f9d1 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80007b2:	bf00      	nop
 80007b4:	4893      	ldr	r0, [pc, #588]	@ (8000a04 <main+0x424>)
 80007b6:	f003 fd81 	bl	80042bc <HAL_UART_GetState>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d1f9      	bne.n	80007b4 <main+0x1d4>

	  sprintf((char*)myMessage,"vol.val=%d",dc_voltage);
 80007c0:	4b97      	ldr	r3, [pc, #604]	@ (8000a20 <main+0x440>)
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4997      	ldr	r1, [pc, #604]	@ (8000a24 <main+0x444>)
 80007c8:	4893      	ldr	r0, [pc, #588]	@ (8000a18 <main+0x438>)
 80007ca:	f004 fd75 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 80007ce:	4892      	ldr	r0, [pc, #584]	@ (8000a18 <main+0x438>)
 80007d0:	f7ff fd36 	bl	8000240 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	498f      	ldr	r1, [pc, #572]	@ (8000a18 <main+0x438>)
 80007dc:	4889      	ldr	r0, [pc, #548]	@ (8000a04 <main+0x424>)
 80007de:	f003 f9b9 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80007e2:	bf00      	nop
 80007e4:	4887      	ldr	r0, [pc, #540]	@ (8000a04 <main+0x424>)
 80007e6:	f003 fd69 	bl	80042bc <HAL_UART_GetState>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d1f9      	bne.n	80007e4 <main+0x204>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 80007f0:	2203      	movs	r2, #3
 80007f2:	498a      	ldr	r1, [pc, #552]	@ (8000a1c <main+0x43c>)
 80007f4:	4883      	ldr	r0, [pc, #524]	@ (8000a04 <main+0x424>)
 80007f6:	f003 f9ad 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80007fa:	bf00      	nop
 80007fc:	4881      	ldr	r0, [pc, #516]	@ (8000a04 <main+0x424>)
 80007fe:	f003 fd5d 	bl	80042bc <HAL_UART_GetState>
 8000802:	4603      	mov	r3, r0
 8000804:	2b20      	cmp	r3, #32
 8000806:	d1f9      	bne.n	80007fc <main+0x21c>

	  sprintf((char*)myMessage,"rpm.val=%d",rotating_speed/100);
 8000808:	4b7f      	ldr	r3, [pc, #508]	@ (8000a08 <main+0x428>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	4a7f      	ldr	r2, [pc, #508]	@ (8000a0c <main+0x42c>)
 800080e:	fba2 2303 	umull	r2, r3, r2, r3
 8000812:	095b      	lsrs	r3, r3, #5
 8000814:	b29b      	uxth	r3, r3
 8000816:	461a      	mov	r2, r3
 8000818:	4983      	ldr	r1, [pc, #524]	@ (8000a28 <main+0x448>)
 800081a:	487f      	ldr	r0, [pc, #508]	@ (8000a18 <main+0x438>)
 800081c:	f004 fd4c 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000820:	487d      	ldr	r0, [pc, #500]	@ (8000a18 <main+0x438>)
 8000822:	f7ff fd0d 	bl	8000240 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29b      	uxth	r3, r3
 800082a:	461a      	mov	r2, r3
 800082c:	497a      	ldr	r1, [pc, #488]	@ (8000a18 <main+0x438>)
 800082e:	4875      	ldr	r0, [pc, #468]	@ (8000a04 <main+0x424>)
 8000830:	f003 f990 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000834:	bf00      	nop
 8000836:	4873      	ldr	r0, [pc, #460]	@ (8000a04 <main+0x424>)
 8000838:	f003 fd40 	bl	80042bc <HAL_UART_GetState>
 800083c:	4603      	mov	r3, r0
 800083e:	2b20      	cmp	r3, #32
 8000840:	d1f9      	bne.n	8000836 <main+0x256>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000842:	2203      	movs	r2, #3
 8000844:	4975      	ldr	r1, [pc, #468]	@ (8000a1c <main+0x43c>)
 8000846:	486f      	ldr	r0, [pc, #444]	@ (8000a04 <main+0x424>)
 8000848:	f003 f984 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 800084c:	bf00      	nop
 800084e:	486d      	ldr	r0, [pc, #436]	@ (8000a04 <main+0x424>)
 8000850:	f003 fd34 	bl	80042bc <HAL_UART_GetState>
 8000854:	4603      	mov	r3, r0
 8000856:	2b20      	cmp	r3, #32
 8000858:	d1f9      	bne.n	800084e <main+0x26e>

	  sprintf((char*)myMessage,"amper.val=%d",motor_current);
 800085a:	4b74      	ldr	r3, [pc, #464]	@ (8000a2c <main+0x44c>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	4973      	ldr	r1, [pc, #460]	@ (8000a30 <main+0x450>)
 8000862:	486d      	ldr	r0, [pc, #436]	@ (8000a18 <main+0x438>)
 8000864:	f004 fd28 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000868:	486b      	ldr	r0, [pc, #428]	@ (8000a18 <main+0x438>)
 800086a:	f7ff fce9 	bl	8000240 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29b      	uxth	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	4968      	ldr	r1, [pc, #416]	@ (8000a18 <main+0x438>)
 8000876:	4863      	ldr	r0, [pc, #396]	@ (8000a04 <main+0x424>)
 8000878:	f003 f96c 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 800087c:	bf00      	nop
 800087e:	4861      	ldr	r0, [pc, #388]	@ (8000a04 <main+0x424>)
 8000880:	f003 fd1c 	bl	80042bc <HAL_UART_GetState>
 8000884:	4603      	mov	r3, r0
 8000886:	2b20      	cmp	r3, #32
 8000888:	d1f9      	bne.n	800087e <main+0x29e>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 800088a:	2203      	movs	r2, #3
 800088c:	4963      	ldr	r1, [pc, #396]	@ (8000a1c <main+0x43c>)
 800088e:	485d      	ldr	r0, [pc, #372]	@ (8000a04 <main+0x424>)
 8000890:	f003 f960 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000894:	bf00      	nop
 8000896:	485b      	ldr	r0, [pc, #364]	@ (8000a04 <main+0x424>)
 8000898:	f003 fd10 	bl	80042bc <HAL_UART_GetState>
 800089c:	4603      	mov	r3, r0
 800089e:	2b20      	cmp	r3, #32
 80008a0:	d1f9      	bne.n	8000896 <main+0x2b6>

	  sprintf((char*)myMessage,"motor.val=%d",motor_temp);
 80008a2:	4b64      	ldr	r3, [pc, #400]	@ (8000a34 <main+0x454>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4963      	ldr	r1, [pc, #396]	@ (8000a38 <main+0x458>)
 80008aa:	485b      	ldr	r0, [pc, #364]	@ (8000a18 <main+0x438>)
 80008ac:	f004 fd04 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 80008b0:	4859      	ldr	r0, [pc, #356]	@ (8000a18 <main+0x438>)
 80008b2:	f7ff fcc5 	bl	8000240 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	4956      	ldr	r1, [pc, #344]	@ (8000a18 <main+0x438>)
 80008be:	4851      	ldr	r0, [pc, #324]	@ (8000a04 <main+0x424>)
 80008c0:	f003 f948 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80008c4:	bf00      	nop
 80008c6:	484f      	ldr	r0, [pc, #316]	@ (8000a04 <main+0x424>)
 80008c8:	f003 fcf8 	bl	80042bc <HAL_UART_GetState>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b20      	cmp	r3, #32
 80008d0:	d1f9      	bne.n	80008c6 <main+0x2e6>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 80008d2:	2203      	movs	r2, #3
 80008d4:	4951      	ldr	r1, [pc, #324]	@ (8000a1c <main+0x43c>)
 80008d6:	484b      	ldr	r0, [pc, #300]	@ (8000a04 <main+0x424>)
 80008d8:	f003 f93c 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80008dc:	bf00      	nop
 80008de:	4849      	ldr	r0, [pc, #292]	@ (8000a04 <main+0x424>)
 80008e0:	f003 fcec 	bl	80042bc <HAL_UART_GetState>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b20      	cmp	r3, #32
 80008e8:	d1f9      	bne.n	80008de <main+0x2fe>

	  sprintf((char*)myMessage,"sistem.val=%d",controller_temp);
 80008ea:	4b54      	ldr	r3, [pc, #336]	@ (8000a3c <main+0x45c>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	4953      	ldr	r1, [pc, #332]	@ (8000a40 <main+0x460>)
 80008f2:	4849      	ldr	r0, [pc, #292]	@ (8000a18 <main+0x438>)
 80008f4:	f004 fce0 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 80008f8:	4847      	ldr	r0, [pc, #284]	@ (8000a18 <main+0x438>)
 80008fa:	f7ff fca1 	bl	8000240 <strlen>
 80008fe:	4603      	mov	r3, r0
 8000900:	b29b      	uxth	r3, r3
 8000902:	461a      	mov	r2, r3
 8000904:	4944      	ldr	r1, [pc, #272]	@ (8000a18 <main+0x438>)
 8000906:	483f      	ldr	r0, [pc, #252]	@ (8000a04 <main+0x424>)
 8000908:	f003 f924 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 800090c:	bf00      	nop
 800090e:	483d      	ldr	r0, [pc, #244]	@ (8000a04 <main+0x424>)
 8000910:	f003 fcd4 	bl	80042bc <HAL_UART_GetState>
 8000914:	4603      	mov	r3, r0
 8000916:	2b20      	cmp	r3, #32
 8000918:	d1f9      	bne.n	800090e <main+0x32e>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 800091a:	2203      	movs	r2, #3
 800091c:	493f      	ldr	r1, [pc, #252]	@ (8000a1c <main+0x43c>)
 800091e:	4839      	ldr	r0, [pc, #228]	@ (8000a04 <main+0x424>)
 8000920:	f003 f918 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000924:	bf00      	nop
 8000926:	4837      	ldr	r0, [pc, #220]	@ (8000a04 <main+0x424>)
 8000928:	f003 fcc8 	bl	80042bc <HAL_UART_GetState>
 800092c:	4603      	mov	r3, r0
 800092e:	2b20      	cmp	r3, #32
 8000930:	d1f9      	bne.n	8000926 <main+0x346>

	  sprintf((char*)myMessage,"gear.txt=\"%c\"",gear);
 8000932:	4b44      	ldr	r3, [pc, #272]	@ (8000a44 <main+0x464>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	4943      	ldr	r1, [pc, #268]	@ (8000a48 <main+0x468>)
 800093a:	4837      	ldr	r0, [pc, #220]	@ (8000a18 <main+0x438>)
 800093c:	f004 fcbc 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000940:	4835      	ldr	r0, [pc, #212]	@ (8000a18 <main+0x438>)
 8000942:	f7ff fc7d 	bl	8000240 <strlen>
 8000946:	4603      	mov	r3, r0
 8000948:	b29b      	uxth	r3, r3
 800094a:	461a      	mov	r2, r3
 800094c:	4932      	ldr	r1, [pc, #200]	@ (8000a18 <main+0x438>)
 800094e:	482d      	ldr	r0, [pc, #180]	@ (8000a04 <main+0x424>)
 8000950:	f003 f900 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000954:	bf00      	nop
 8000956:	482b      	ldr	r0, [pc, #172]	@ (8000a04 <main+0x424>)
 8000958:	f003 fcb0 	bl	80042bc <HAL_UART_GetState>
 800095c:	4603      	mov	r3, r0
 800095e:	2b20      	cmp	r3, #32
 8000960:	d1f9      	bne.n	8000956 <main+0x376>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000962:	2203      	movs	r2, #3
 8000964:	492d      	ldr	r1, [pc, #180]	@ (8000a1c <main+0x43c>)
 8000966:	4827      	ldr	r0, [pc, #156]	@ (8000a04 <main+0x424>)
 8000968:	f003 f8f4 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 800096c:	bf00      	nop
 800096e:	4825      	ldr	r0, [pc, #148]	@ (8000a04 <main+0x424>)
 8000970:	f003 fca4 	bl	80042bc <HAL_UART_GetState>
 8000974:	4603      	mov	r3, r0
 8000976:	2b20      	cmp	r3, #32
 8000978:	d1f9      	bne.n	800096e <main+0x38e>

	  soc = ((dc_voltage - 48.0) / (60.0 - 48.0)) * 100.0;
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <main+0x440>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000986:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 80009e8 <main+0x408>
 800098a:	ee37 6b46 	vsub.f64	d6, d7, d6
 800098e:	eeb2 5b08 	vmov.f64	d5, #40	@ 0x41400000  12.0
 8000992:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000996:	ed9f 6b16 	vldr	d6, [pc, #88]	@ 80009f0 <main+0x410>
 800099a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800099e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80009a6:	793b      	ldrb	r3, [r7, #4]
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <main+0x46c>)
 80009ac:	701a      	strb	r2, [r3, #0]
	  sprintf((char*)myMessage,"soc.val=%d",soc);
 80009ae:	4b27      	ldr	r3, [pc, #156]	@ (8000a4c <main+0x46c>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	4926      	ldr	r1, [pc, #152]	@ (8000a50 <main+0x470>)
 80009b6:	4818      	ldr	r0, [pc, #96]	@ (8000a18 <main+0x438>)
 80009b8:	f004 fc7e 	bl	80052b8 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 80009bc:	4816      	ldr	r0, [pc, #88]	@ (8000a18 <main+0x438>)
 80009be:	f7ff fc3f 	bl	8000240 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	4913      	ldr	r1, [pc, #76]	@ (8000a18 <main+0x438>)
 80009ca:	480e      	ldr	r0, [pc, #56]	@ (8000a04 <main+0x424>)
 80009cc:	f003 f8c2 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 80009d0:	bf00      	nop
 80009d2:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <main+0x424>)
 80009d4:	f003 fc72 	bl	80042bc <HAL_UART_GetState>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b20      	cmp	r3, #32
 80009dc:	e03a      	b.n	8000a54 <main+0x474>
 80009de:	bf00      	nop
 80009e0:	7ae147ae 	.word	0x7ae147ae
 80009e4:	3ff3ae14 	.word	0x3ff3ae14
 80009e8:	00000000 	.word	0x00000000
 80009ec:	40480000 	.word	0x40480000
 80009f0:	00000000 	.word	0x00000000
 80009f4:	40590000 	.word	0x40590000
 80009f8:	08005c14 	.word	0x08005c14
 80009fc:	20000260 	.word	0x20000260
 8000a00:	2000012c 	.word	0x2000012c
 8000a04:	200000a4 	.word	0x200000a4
 8000a08:	20000222 	.word	0x20000222
 8000a0c:	51eb851f 	.word	0x51eb851f
 8000a10:	20000229 	.word	0x20000229
 8000a14:	08005c1c 	.word	0x08005c1c
 8000a18:	2000022c 	.word	0x2000022c
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	2000021a 	.word	0x2000021a
 8000a24:	08005c2c 	.word	0x08005c2c
 8000a28:	08005c38 	.word	0x08005c38
 8000a2c:	2000021c 	.word	0x2000021c
 8000a30:	08005c44 	.word	0x08005c44
 8000a34:	2000021e 	.word	0x2000021e
 8000a38:	08005c54 	.word	0x08005c54
 8000a3c:	20000220 	.word	0x20000220
 8000a40:	08005c64 	.word	0x08005c64
 8000a44:	2000022b 	.word	0x2000022b
 8000a48:	08005c74 	.word	0x08005c74
 8000a4c:	2000022a 	.word	0x2000022a
 8000a50:	08005c84 	.word	0x08005c84
 8000a54:	d1bd      	bne.n	80009d2 <main+0x3f2>
	  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000a56:	2203      	movs	r2, #3
 8000a58:	4970      	ldr	r1, [pc, #448]	@ (8000c1c <main+0x63c>)
 8000a5a:	4871      	ldr	r0, [pc, #452]	@ (8000c20 <main+0x640>)
 8000a5c:	f003 f87a 	bl	8003b54 <HAL_UART_Transmit_IT>
	  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000a60:	bf00      	nop
 8000a62:	486f      	ldr	r0, [pc, #444]	@ (8000c20 <main+0x640>)
 8000a64:	f003 fc2a 	bl	80042bc <HAL_UART_GetState>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b20      	cmp	r3, #32
 8000a6c:	d1f9      	bne.n	8000a62 <main+0x482>

	  if(error_code == 0)
 8000a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8000c24 <main+0x644>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d142      	bne.n	8000afc <main+0x51c>
	  {
		  sprintf((char*)myMessage,"t2.txt=\"\"");
 8000a76:	496c      	ldr	r1, [pc, #432]	@ (8000c28 <main+0x648>)
 8000a78:	486c      	ldr	r0, [pc, #432]	@ (8000c2c <main+0x64c>)
 8000a7a:	f004 fc1d 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000a7e:	486b      	ldr	r0, [pc, #428]	@ (8000c2c <main+0x64c>)
 8000a80:	f7ff fbde 	bl	8000240 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4968      	ldr	r1, [pc, #416]	@ (8000c2c <main+0x64c>)
 8000a8c:	4864      	ldr	r0, [pc, #400]	@ (8000c20 <main+0x640>)
 8000a8e:	f003 f861 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000a92:	bf00      	nop
 8000a94:	4862      	ldr	r0, [pc, #392]	@ (8000c20 <main+0x640>)
 8000a96:	f003 fc11 	bl	80042bc <HAL_UART_GetState>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d1f9      	bne.n	8000a94 <main+0x4b4>
		  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	495e      	ldr	r1, [pc, #376]	@ (8000c1c <main+0x63c>)
 8000aa4:	485e      	ldr	r0, [pc, #376]	@ (8000c20 <main+0x640>)
 8000aa6:	f003 f855 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000aaa:	bf00      	nop
 8000aac:	485c      	ldr	r0, [pc, #368]	@ (8000c20 <main+0x640>)
 8000aae:	f003 fc05 	bl	80042bc <HAL_UART_GetState>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b20      	cmp	r3, #32
 8000ab6:	d1f9      	bne.n	8000aac <main+0x4cc>

		  sprintf((char*)myMessage,"t2.bco=65535");
 8000ab8:	495d      	ldr	r1, [pc, #372]	@ (8000c30 <main+0x650>)
 8000aba:	485c      	ldr	r0, [pc, #368]	@ (8000c2c <main+0x64c>)
 8000abc:	f004 fbfc 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000ac0:	485a      	ldr	r0, [pc, #360]	@ (8000c2c <main+0x64c>)
 8000ac2:	f7ff fbbd 	bl	8000240 <strlen>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	461a      	mov	r2, r3
 8000acc:	4957      	ldr	r1, [pc, #348]	@ (8000c2c <main+0x64c>)
 8000ace:	4854      	ldr	r0, [pc, #336]	@ (8000c20 <main+0x640>)
 8000ad0:	f003 f840 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000ad4:	bf00      	nop
 8000ad6:	4852      	ldr	r0, [pc, #328]	@ (8000c20 <main+0x640>)
 8000ad8:	f003 fbf0 	bl	80042bc <HAL_UART_GetState>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b20      	cmp	r3, #32
 8000ae0:	d1f9      	bne.n	8000ad6 <main+0x4f6>
		  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	494d      	ldr	r1, [pc, #308]	@ (8000c1c <main+0x63c>)
 8000ae6:	484e      	ldr	r0, [pc, #312]	@ (8000c20 <main+0x640>)
 8000ae8:	f003 f834 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000aec:	bf00      	nop
 8000aee:	484c      	ldr	r0, [pc, #304]	@ (8000c20 <main+0x640>)
 8000af0:	f003 fbe4 	bl	80042bc <HAL_UART_GetState>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b20      	cmp	r3, #32
 8000af8:	d1f9      	bne.n	8000aee <main+0x50e>
 8000afa:	e044      	b.n	8000b86 <main+0x5a6>
	  }
	  else{
		  sprintf((char*)myMessage,"t2.txt=\"%d\"",error_code);
 8000afc:	4b49      	ldr	r3, [pc, #292]	@ (8000c24 <main+0x644>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	494c      	ldr	r1, [pc, #304]	@ (8000c34 <main+0x654>)
 8000b04:	4849      	ldr	r0, [pc, #292]	@ (8000c2c <main+0x64c>)
 8000b06:	f004 fbd7 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000b0a:	4848      	ldr	r0, [pc, #288]	@ (8000c2c <main+0x64c>)
 8000b0c:	f7ff fb98 	bl	8000240 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	4945      	ldr	r1, [pc, #276]	@ (8000c2c <main+0x64c>)
 8000b18:	4841      	ldr	r0, [pc, #260]	@ (8000c20 <main+0x640>)
 8000b1a:	f003 f81b 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000b1e:	bf00      	nop
 8000b20:	483f      	ldr	r0, [pc, #252]	@ (8000c20 <main+0x640>)
 8000b22:	f003 fbcb 	bl	80042bc <HAL_UART_GetState>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b20      	cmp	r3, #32
 8000b2a:	d1f9      	bne.n	8000b20 <main+0x540>
		  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	493b      	ldr	r1, [pc, #236]	@ (8000c1c <main+0x63c>)
 8000b30:	483b      	ldr	r0, [pc, #236]	@ (8000c20 <main+0x640>)
 8000b32:	f003 f80f 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000b36:	bf00      	nop
 8000b38:	4839      	ldr	r0, [pc, #228]	@ (8000c20 <main+0x640>)
 8000b3a:	f003 fbbf 	bl	80042bc <HAL_UART_GetState>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b20      	cmp	r3, #32
 8000b42:	d1f9      	bne.n	8000b38 <main+0x558>

		  sprintf((char*)myMessage,"t2.bco=63488");
 8000b44:	493c      	ldr	r1, [pc, #240]	@ (8000c38 <main+0x658>)
 8000b46:	4839      	ldr	r0, [pc, #228]	@ (8000c2c <main+0x64c>)
 8000b48:	f004 fbb6 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000b4c:	4837      	ldr	r0, [pc, #220]	@ (8000c2c <main+0x64c>)
 8000b4e:	f7ff fb77 	bl	8000240 <strlen>
 8000b52:	4603      	mov	r3, r0
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	461a      	mov	r2, r3
 8000b58:	4934      	ldr	r1, [pc, #208]	@ (8000c2c <main+0x64c>)
 8000b5a:	4831      	ldr	r0, [pc, #196]	@ (8000c20 <main+0x640>)
 8000b5c:	f002 fffa 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000b60:	bf00      	nop
 8000b62:	482f      	ldr	r0, [pc, #188]	@ (8000c20 <main+0x640>)
 8000b64:	f003 fbaa 	bl	80042bc <HAL_UART_GetState>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b20      	cmp	r3, #32
 8000b6c:	d1f9      	bne.n	8000b62 <main+0x582>
		  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000b6e:	2203      	movs	r2, #3
 8000b70:	492a      	ldr	r1, [pc, #168]	@ (8000c1c <main+0x63c>)
 8000b72:	482b      	ldr	r0, [pc, #172]	@ (8000c20 <main+0x640>)
 8000b74:	f002 ffee 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000b78:	bf00      	nop
 8000b7a:	4829      	ldr	r0, [pc, #164]	@ (8000c20 <main+0x640>)
 8000b7c:	f003 fb9e 	bl	80042bc <HAL_UART_GetState>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b20      	cmp	r3, #32
 8000b84:	d1f9      	bne.n	8000b7a <main+0x59a>
	  //HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
	  //while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
	  //HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
	  //while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);

	  if(speed_mode == 1)
 8000b86:	4b2d      	ldr	r3, [pc, #180]	@ (8000c3c <main+0x65c>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d121      	bne.n	8000bd2 <main+0x5f2>
	  {
		  sprintf((char*)myMessage,"eco.pic=4");
 8000b8e:	492c      	ldr	r1, [pc, #176]	@ (8000c40 <main+0x660>)
 8000b90:	4826      	ldr	r0, [pc, #152]	@ (8000c2c <main+0x64c>)
 8000b92:	f004 fb91 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000b96:	4825      	ldr	r0, [pc, #148]	@ (8000c2c <main+0x64c>)
 8000b98:	f7ff fb52 	bl	8000240 <strlen>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4922      	ldr	r1, [pc, #136]	@ (8000c2c <main+0x64c>)
 8000ba4:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <main+0x640>)
 8000ba6:	f002 ffd5 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000baa:	bf00      	nop
 8000bac:	481c      	ldr	r0, [pc, #112]	@ (8000c20 <main+0x640>)
 8000bae:	f003 fb85 	bl	80042bc <HAL_UART_GetState>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b20      	cmp	r3, #32
 8000bb6:	d1f9      	bne.n	8000bac <main+0x5cc>
		  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000bb8:	2203      	movs	r2, #3
 8000bba:	4918      	ldr	r1, [pc, #96]	@ (8000c1c <main+0x63c>)
 8000bbc:	4818      	ldr	r0, [pc, #96]	@ (8000c20 <main+0x640>)
 8000bbe:	f002 ffc9 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000bc2:	bf00      	nop
 8000bc4:	4816      	ldr	r0, [pc, #88]	@ (8000c20 <main+0x640>)
 8000bc6:	f003 fb79 	bl	80042bc <HAL_UART_GetState>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b20      	cmp	r3, #32
 8000bce:	d1f9      	bne.n	8000bc4 <main+0x5e4>
 8000bd0:	e020      	b.n	8000c14 <main+0x634>
	  }

	  else
	  {
		  sprintf((char*)myMessage,"eco.pic=5");
 8000bd2:	491c      	ldr	r1, [pc, #112]	@ (8000c44 <main+0x664>)
 8000bd4:	4815      	ldr	r0, [pc, #84]	@ (8000c2c <main+0x64c>)
 8000bd6:	f004 fb6f 	bl	80052b8 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, myMessage, strlen((char*)myMessage));
 8000bda:	4814      	ldr	r0, [pc, #80]	@ (8000c2c <main+0x64c>)
 8000bdc:	f7ff fb30 	bl	8000240 <strlen>
 8000be0:	4603      	mov	r3, r0
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	461a      	mov	r2, r3
 8000be6:	4911      	ldr	r1, [pc, #68]	@ (8000c2c <main+0x64c>)
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <main+0x640>)
 8000bea:	f002 ffb3 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000bee:	bf00      	nop
 8000bf0:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <main+0x640>)
 8000bf2:	f003 fb63 	bl	80042bc <HAL_UART_GetState>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d1f9      	bne.n	8000bf0 <main+0x610>
		  HAL_UART_Transmit_IT(&huart1, cmdEnd, sizeof(cmdEnd));
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	4907      	ldr	r1, [pc, #28]	@ (8000c1c <main+0x63c>)
 8000c00:	4807      	ldr	r0, [pc, #28]	@ (8000c20 <main+0x640>)
 8000c02:	f002 ffa7 	bl	8003b54 <HAL_UART_Transmit_IT>
		  while(HAL_UART_GetState(&huart1) != HAL_UART_STATE_READY);
 8000c06:	bf00      	nop
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <main+0x640>)
 8000c0a:	f003 fb57 	bl	80042bc <HAL_UART_GetState>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b20      	cmp	r3, #32
 8000c12:	d1f9      	bne.n	8000c08 <main+0x628>

	  }
	  HAL_Delay(30);
 8000c14:	201e      	movs	r0, #30
 8000c16:	f000 fd03 	bl	8001620 <HAL_Delay>
	  if (message_ready)
 8000c1a:	e532      	b.n	8000682 <main+0xa2>
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	200000a4 	.word	0x200000a4
 8000c24:	20000224 	.word	0x20000224
 8000c28:	08005c90 	.word	0x08005c90
 8000c2c:	2000022c 	.word	0x2000022c
 8000c30:	08005c9c 	.word	0x08005c9c
 8000c34:	08005cac 	.word	0x08005cac
 8000c38:	08005cb8 	.word	0x08005cb8
 8000c3c:	20000228 	.word	0x20000228
 8000c40:	08005cc8 	.word	0x08005cc8
 8000c44:	08005cd4 	.word	0x08005cd4

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	@ 0x50
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2234      	movs	r2, #52	@ 0x34
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fb4e 	bl	80052f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	f107 0308 	add.w	r3, r7, #8
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <SystemClock_Config+0xb0>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c70:	4a21      	ldr	r2, [pc, #132]	@ (8000cf8 <SystemClock_Config+0xb0>)
 8000c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <SystemClock_Config+0xb0>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c84:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <SystemClock_Config+0xb4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cfc <SystemClock_Config+0xb4>)
 8000c8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c92:	6013      	str	r3, [r2, #0]
 8000c94:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <SystemClock_Config+0xb4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cac:	2300      	movs	r3, #0
 8000cae:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f001 fe43 	bl	8002940 <HAL_RCC_OscConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000cc0:	f000 fa68 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cd8:	f107 0308 	add.w	r3, r7, #8
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 f8dc 	bl	8002e9c <HAL_RCC_ClockConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cea:	f000 fa53 	bl	8001194 <Error_Handler>
  }
}
 8000cee:	bf00      	nop
 8000cf0:	3750      	adds	r7, #80	@ 0x50
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	40007000 	.word	0x40007000

08000d00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d04:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d06:	4a18      	ldr	r2, [pc, #96]	@ (8000d68 <MX_CAN1_Init+0x68>)
 8000d08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d1e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000d22:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d26:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d2a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <MX_CAN1_Init+0x64>)
 8000d52:	f000 fc89 	bl	8001668 <HAL_CAN_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d5c:	f000 fa1a 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000007c 	.word	0x2000007c
 8000d68:	40006400 	.word	0x40006400

08000d6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d70:	4b14      	ldr	r3, [pc, #80]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d72:	4a15      	ldr	r2, [pc, #84]	@ (8000dc8 <MX_USART1_UART_Init+0x5c>)
 8000d74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d76:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d78:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d92:	220c      	movs	r2, #12
 8000d94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da8:	4b06      	ldr	r3, [pc, #24]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	@ (8000dc4 <MX_USART1_UART_Init+0x58>)
 8000db0:	f002 fe82 	bl	8003ab8 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dba:	f000 f9eb 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200000a4 	.word	0x200000a4
 8000dc8:	40011000 	.word	0x40011000

08000dcc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	@ (8000e28 <MX_USART2_UART_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dd8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART2_UART_Init+0x58>)
 8000e10:	f002 fe52 	bl	8003ab8 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f000 f9bb 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000012c 	.word	0x2000012c
 8000e28:	40004400 	.word	0x40004400

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <MX_GPIO_Init+0x44>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e36:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <MX_GPIO_Init+0x44>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <MX_GPIO_Init+0x44>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	@ (8000e70 <MX_GPIO_Init+0x44>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a08      	ldr	r2, [pc, #32]	@ (8000e70 <MX_GPIO_Init+0x44>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <MX_GPIO_Init+0x44>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800

08000e74 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &rxHeader, canRX);
 8000e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000e7e:	4a6b      	ldr	r2, [pc, #428]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000e80:	2100      	movs	r1, #0
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f000 fe1c 	bl	8001ac0 <HAL_CAN_GetRxMessage>
	 if (rxHeader.IDE == CAN_ID_EXT && rxHeader.ExtId == 0x10F8108D)
 8000e88:	4b68      	ldr	r3, [pc, #416]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d169      	bne.n	8000f64 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
 8000e90:	4b66      	ldr	r3, [pc, #408]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	4a66      	ldr	r2, [pc, #408]	@ (8001030 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d164      	bne.n	8000f64 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
	    {
	        dc_voltage = (uint16_t)(canRX[1] << 8 | canRX[0]) * 0.1f;
 8000e9a:	4b63      	ldr	r3, [pc, #396]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	021b      	lsls	r3, r3, #8
 8000ea0:	b21a      	sxth	r2, r3
 8000ea2:	4b61      	ldr	r3, [pc, #388]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	b21b      	sxth	r3, r3
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b21b      	sxth	r3, r3
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eb6:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
 8000eba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ec2:	ee17 3a90 	vmov	r3, s15
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8001038 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000eca:	801a      	strh	r2, [r3, #0]
	        motor_current = (uint16_t)(canRX[3] << 8 | canRX[2]) * 0.1f;
 8000ecc:	4b56      	ldr	r3, [pc, #344]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000ece:	78db      	ldrb	r3, [r3, #3]
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	4b54      	ldr	r3, [pc, #336]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000ed6:	789b      	ldrb	r3, [r3, #2]
 8000ed8:	b21b      	sxth	r3, r3
 8000eda:	4313      	orrs	r3, r2
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	ee07 3a90 	vmov	s15, r3
 8000ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
 8000eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ef4:	ee17 3a90 	vmov	r3, s15
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b50      	ldr	r3, [pc, #320]	@ (800103c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000efc:	801a      	strh	r2, [r3, #0]
	        motor_temp = (uint16_t)(canRX[5] << 8 | canRX[4]) * 0.1f;
 8000efe:	4b4a      	ldr	r3, [pc, #296]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f00:	795b      	ldrb	r3, [r3, #5]
 8000f02:	021b      	lsls	r3, r3, #8
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b48      	ldr	r3, [pc, #288]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f08:	791b      	ldrb	r3, [r3, #4]
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	ee07 3a90 	vmov	s15, r3
 8000f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f1a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
 8000f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f26:	ee17 3a90 	vmov	r3, s15
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	4b44      	ldr	r3, [pc, #272]	@ (8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000f2e:	801a      	strh	r2, [r3, #0]
	        controller_temp = (uint16_t)(canRX[7] << 8 | canRX[6]) * 0.1f;
 8000f30:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f32:	79db      	ldrb	r3, [r3, #7]
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b21a      	sxth	r2, r3
 8000f38:	4b3b      	ldr	r3, [pc, #236]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f3a:	799b      	ldrb	r3, [r3, #6]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f58:	ee17 3a90 	vmov	r3, s15
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	e05c      	b.n	800101e <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>

	    }
	 else if (rxHeader.IDE == CAN_ID_EXT && rxHeader.ExtId == 0x10F8109A)
 8000f64:	4b31      	ldr	r3, [pc, #196]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d158      	bne.n	800101e <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a35      	ldr	r2, [pc, #212]	@ (8001048 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d153      	bne.n	800101e <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>
	 {
	        direction_speed_mode = canRX[0];
 8000f76:	4b2c      	ldr	r3, [pc, #176]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	4b34      	ldr	r3, [pc, #208]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000f7c:	701a      	strb	r2, [r3, #0]
	        rotating_speed = (uint16_t)(canRX[2] << 8 | canRX[1]);
 8000f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	021b      	lsls	r3, r3, #8
 8000f84:	b21a      	sxth	r2, r3
 8000f86:	4b28      	ldr	r3, [pc, #160]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b2f      	ldr	r3, [pc, #188]	@ (8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000f94:	801a      	strh	r2, [r3, #0]
	        error_code = canRX[3];
 8000f96:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000f98:	78da      	ldrb	r2, [r3, #3]
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001054 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000f9c:	701a      	strb	r2, [r3, #0]
	        low_power_mode = canRX[4];
 8000f9e:	4b22      	ldr	r3, [pc, #136]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000fa0:	791a      	ldrb	r2, [r3, #4]
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	        mileage_subtotal = (uint16_t)(canRX[6] << 8 | canRX[5]) * 0.1f;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000fa8:	799b      	ldrb	r3, [r3, #6]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	b21a      	sxth	r2, r3
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000fb0:	795b      	ldrb	r3, [r3, #5]
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	b21b      	sxth	r3, r3
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fc2:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001034 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fce:	ee17 3a90 	vmov	r3, s15
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	4b21      	ldr	r3, [pc, #132]	@ (800105c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000fd6:	801a      	strh	r2, [r3, #0]

	        direction = direction_speed_mode & 0x03;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	        speed_mode = (direction_speed_mode & 0x08) >> 3;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	10db      	asrs	r3, r3, #3
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000ff6:	701a      	strb	r2, [r3, #0]

	        switch(direction) {
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d002      	beq.n	8001006 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
 8001000:	2b02      	cmp	r3, #2
 8001002:	d004      	beq.n	800100e <HAL_CAN_RxFifo0MsgPendingCallback+0x19a>
 8001004:	e007      	b.n	8001016 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a2>
	            case 1:
	                gear = 'D';
 8001006:	4b18      	ldr	r3, [pc, #96]	@ (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001008:	2244      	movs	r2, #68	@ 0x44
 800100a:	701a      	strb	r2, [r3, #0]
	                break;
 800100c:	e007      	b.n	800101e <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>
	            case 2:
	            	gear = 'R';
 800100e:	4b16      	ldr	r3, [pc, #88]	@ (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001010:	2252      	movs	r2, #82	@ 0x52
 8001012:	701a      	strb	r2, [r3, #0]
	                break;
 8001014:	e003      	b.n	800101e <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>
	            default:
	            	gear = 'N';
 8001016:	4b14      	ldr	r3, [pc, #80]	@ (8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8001018:	224e      	movs	r2, #78	@ 0x4e
 800101a:	701a      	strb	r2, [r3, #0]
	                break;
 800101c:	bf00      	nop
	        }


	 }

}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001e8 	.word	0x200001e8
 800102c:	200001b4 	.word	0x200001b4
 8001030:	10f8108d 	.word	0x10f8108d
 8001034:	3dcccccd 	.word	0x3dcccccd
 8001038:	2000021a 	.word	0x2000021a
 800103c:	2000021c 	.word	0x2000021c
 8001040:	2000021e 	.word	0x2000021e
 8001044:	20000220 	.word	0x20000220
 8001048:	10f8109a 	.word	0x10f8109a
 800104c:	20000218 	.word	0x20000218
 8001050:	20000222 	.word	0x20000222
 8001054:	20000224 	.word	0x20000224
 8001058:	20000225 	.word	0x20000225
 800105c:	20000226 	.word	0x20000226
 8001060:	20000219 	.word	0x20000219
 8001064:	20000228 	.word	0x20000228
 8001068:	2000022b 	.word	0x2000022b

0800106c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2a      	ldr	r2, [pc, #168]	@ (8001124 <HAL_UART_RxCpltCallback+0xb8>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d14d      	bne.n	800111a <HAL_UART_RxCpltCallback+0xae>
    {
        if (buffer_index < sizeof(buffer) - 3) // Reserve space for 3 0xFF
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	2b10      	cmp	r3, #16
 8001084:	d841      	bhi.n	800110a <HAL_UART_RxCpltCallback+0x9e>
        {
            if (coming_message[0] == '\n')
 8001086:	4b29      	ldr	r3, [pc, #164]	@ (800112c <HAL_UART_RxCpltCallback+0xc0>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b0a      	cmp	r3, #10
 800108c:	d131      	bne.n	80010f2 <HAL_UART_RxCpltCallback+0x86>
            {
                // Replace '\n' with three 0xFF bytes
                buffer[buffer_index++] = 0xFF;
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	b291      	uxth	r1, r2
 8001096:	4a24      	ldr	r2, [pc, #144]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 8001098:	8011      	strh	r1, [r2, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <HAL_UART_RxCpltCallback+0xc4>)
 800109e:	21ff      	movs	r1, #255	@ 0xff
 80010a0:	5499      	strb	r1, [r3, r2]
                buffer[buffer_index++] = 0xFF;
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	b291      	uxth	r1, r2
 80010aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010ac:	8011      	strh	r1, [r2, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <HAL_UART_RxCpltCallback+0xc4>)
 80010b2:	21ff      	movs	r1, #255	@ 0xff
 80010b4:	5499      	strb	r1, [r3, r2]
                buffer[buffer_index++] = 0xFF;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010b8:	881b      	ldrh	r3, [r3, #0]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	b291      	uxth	r1, r2
 80010be:	4a1a      	ldr	r2, [pc, #104]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010c0:	8011      	strh	r1, [r2, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <HAL_UART_RxCpltCallback+0xc4>)
 80010c6:	21ff      	movs	r1, #255	@ 0xff
 80010c8:	5499      	strb	r1, [r3, r2]
                buffer[buffer_index++] = 0xFF;
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	b291      	uxth	r1, r2
 80010d2:	4a15      	ldr	r2, [pc, #84]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010d4:	8011      	strh	r1, [r2, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <HAL_UART_RxCpltCallback+0xc4>)
 80010da:	21ff      	movs	r1, #255	@ 0xff
 80010dc:	5499      	strb	r1, [r3, r2]

                // Null-terminate the string
                buffer[buffer_index] = '\0';
 80010de:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_UART_RxCpltCallback+0xc4>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	5499      	strb	r1, [r3, r2]

                // Set flag to indicate message is ready
                message_ready = 1;
 80010ea:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_UART_RxCpltCallback+0xc8>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	e00e      	b.n	8001110 <HAL_UART_RxCpltCallback+0xa4>
            }
            else
            {
                // Add the character to the buffer
                buffer[buffer_index++] = coming_message[0];
 80010f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	b291      	uxth	r1, r2
 80010fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 80010fc:	8011      	strh	r1, [r2, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <HAL_UART_RxCpltCallback+0xc0>)
 8001102:	7819      	ldrb	r1, [r3, #0]
 8001104:	4b0a      	ldr	r3, [pc, #40]	@ (8001130 <HAL_UART_RxCpltCallback+0xc4>)
 8001106:	5499      	strb	r1, [r3, r2]
 8001108:	e002      	b.n	8001110 <HAL_UART_RxCpltCallback+0xa4>
            }
        }
        else
        {
            // Buffer overflow, reset the buffer
            buffer_index = 0;
 800110a:	4b07      	ldr	r3, [pc, #28]	@ (8001128 <HAL_UART_RxCpltCallback+0xbc>)
 800110c:	2200      	movs	r2, #0
 800110e:	801a      	strh	r2, [r3, #0]
        }

        // Re-enable UART receive interrupt
        HAL_UART_Receive_IT(&huart2, coming_message, sizeof(coming_message));
 8001110:	2201      	movs	r2, #1
 8001112:	4906      	ldr	r1, [pc, #24]	@ (800112c <HAL_UART_RxCpltCallback+0xc0>)
 8001114:	4808      	ldr	r0, [pc, #32]	@ (8001138 <HAL_UART_RxCpltCallback+0xcc>)
 8001116:	f002 fd7b 	bl	8003c10 <HAL_UART_Receive_IT>
    }
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40004400 	.word	0x40004400
 8001128:	2000028c 	.word	0x2000028c
 800112c:	20000274 	.word	0x20000274
 8001130:	20000278 	.word	0x20000278
 8001134:	2000028e 	.word	0x2000028e
 8001138:	2000012c 	.word	0x2000012c

0800113c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800114e:	f001 f941 	bl	80023d4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001152:	2301      	movs	r3, #1
 8001154:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001156:	2300      	movs	r3, #0
 8001158:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800115e:	231f      	movs	r3, #31
 8001160:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001162:	2387      	movs	r3, #135	@ 0x87
 8001164:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001166:	2300      	movs	r3, #0
 8001168:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800116a:	2300      	movs	r3, #0
 800116c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800116e:	2301      	movs	r3, #1
 8001170:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001172:	2301      	movs	r3, #1
 8001174:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800117e:	463b      	mov	r3, r7
 8001180:	4618      	mov	r0, r3
 8001182:	f001 f95f 	bl	8002444 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001186:	2004      	movs	r0, #4
 8001188:	f001 f93c 	bl	8002404 <HAL_MPU_Enable>

}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <Error_Handler+0x8>

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_MspInit+0x44>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	4a0e      	ldr	r2, [pc, #56]	@ (80011e4 <HAL_MspInit+0x44>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b2:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <HAL_MspInit+0x44>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	4a08      	ldr	r2, [pc, #32]	@ (80011e4 <HAL_MspInit+0x44>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_MspInit+0x44>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800

080011e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08a      	sub	sp, #40	@ 0x28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1b      	ldr	r2, [pc, #108]	@ (8001274 <HAL_CAN_MspInit+0x8c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d130      	bne.n	800126c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800120a:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <HAL_CAN_MspInit+0x90>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	4a1a      	ldr	r2, [pc, #104]	@ (8001278 <HAL_CAN_MspInit+0x90>)
 8001210:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001214:	6413      	str	r3, [r2, #64]	@ 0x40
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <HAL_CAN_MspInit+0x90>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_CAN_MspInit+0x90>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a14      	ldr	r2, [pc, #80]	@ (8001278 <HAL_CAN_MspInit+0x90>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_CAN_MspInit+0x90>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800123a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	2303      	movs	r3, #3
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800124c:	2309      	movs	r3, #9
 800124e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4809      	ldr	r0, [pc, #36]	@ (800127c <HAL_CAN_MspInit+0x94>)
 8001258:	f001 f9c6 	bl	80025e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2102      	movs	r1, #2
 8001260:	2014      	movs	r0, #20
 8001262:	f001 f880 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001266:	2014      	movs	r0, #20
 8001268:	f001 f899 	bl	800239e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	@ 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40006400 	.word	0x40006400
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b0b0      	sub	sp, #192	@ 0xc0
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	2290      	movs	r2, #144	@ 0x90
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f004 f829 	bl	80052f8 <memset>
  if(huart->Instance==USART1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a4a      	ldr	r2, [pc, #296]	@ (80013d4 <HAL_UART_MspInit+0x154>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d144      	bne.n	800133a <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012b4:	2300      	movs	r3, #0
 80012b6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4618      	mov	r0, r3
 80012be:	f001 ffd3 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012c8:	f7ff ff64 	bl	8001194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012cc:	4b42      	ldr	r3, [pc, #264]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d0:	4a41      	ldr	r2, [pc, #260]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d8:	4b3f      	ldr	r3, [pc, #252]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 80012e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e8:	4a3b      	ldr	r2, [pc, #236]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f0:	4b39      	ldr	r3, [pc, #228]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 80012f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012fc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001316:	2304      	movs	r3, #4
 8001318:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001320:	4619      	mov	r1, r3
 8001322:	482e      	ldr	r0, [pc, #184]	@ (80013dc <HAL_UART_MspInit+0x15c>)
 8001324:	f001 f960 	bl	80025e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2025      	movs	r0, #37	@ 0x25
 800132e:	f001 f81a 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001332:	2025      	movs	r0, #37	@ 0x25
 8001334:	f001 f833 	bl	800239e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001338:	e047      	b.n	80013ca <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a28      	ldr	r2, [pc, #160]	@ (80013e0 <HAL_UART_MspInit+0x160>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d142      	bne.n	80013ca <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001348:	2300      	movs	r3, #0
 800134a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4618      	mov	r0, r3
 8001352:	f001 ff89 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800135c:	f7ff ff1a 	bl	8001194 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	4a1c      	ldr	r2, [pc, #112]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 8001366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136a:	6413      	str	r3, [r2, #64]	@ 0x40
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137c:	4a16      	ldr	r2, [pc, #88]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6313      	str	r3, [r2, #48]	@ 0x30
 8001384:	4b14      	ldr	r3, [pc, #80]	@ (80013d8 <HAL_UART_MspInit+0x158>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001390:	230c      	movs	r3, #12
 8001392:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013a8:	2307      	movs	r3, #7
 80013aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80013b2:	4619      	mov	r1, r3
 80013b4:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <HAL_UART_MspInit+0x164>)
 80013b6:	f001 f917 	bl	80025e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2101      	movs	r1, #1
 80013be:	2026      	movs	r0, #38	@ 0x26
 80013c0:	f000 ffd1 	bl	8002366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c4:	2026      	movs	r0, #38	@ 0x26
 80013c6:	f000 ffea 	bl	800239e <HAL_NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	37c0      	adds	r7, #192	@ 0xc0
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40020000 	.word	0x40020000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f000 f8cf 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <CAN1_RX0_IRQHandler+0x10>)
 800144e:	f000 fc7f 	bl	8001d50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000007c 	.word	0x2000007c

0800145c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <USART1_IRQHandler+0x10>)
 8001462:	f002 fc19 	bl	8003c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200000a4 	.word	0x200000a4

08001470 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <USART2_IRQHandler+0x10>)
 8001476:	f002 fc0f 	bl	8003c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000012c 	.word	0x2000012c

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f003 ff28 	bl	8005308 <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20080000 	.word	0x20080000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	20000290 	.word	0x20000290
 80014ec:	200003e0 	.word	0x200003e0

080014f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001514:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800154c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001518:	f7ff ffea 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	@ (8001550 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	@ (8001554 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	@ (8001560 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001542:	f003 fee7 	bl	8005314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001546:	f7ff f84b 	bl	80005e0 <main>
  bx  lr    
 800154a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800154c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001558:	08005d3c 	.word	0x08005d3c
  ldr r2, =_sbss
 800155c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001560:	200003e0 	.word	0x200003e0

08001564 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>

08001566 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156a:	2003      	movs	r0, #3
 800156c:	f000 fef0 	bl	8002350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001570:	200f      	movs	r0, #15
 8001572:	f000 f805 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001576:	f7ff fe13 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 ff0b 	bl	80023ba <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 fed3 	bl	8002366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	@ (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000004 	.word	0x20000004
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000294 	.word	0x20000294

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	@ (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000294 	.word	0x20000294

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000000c 	.word	0x2000000c

08001668 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e0ed      	b.n	8001856 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fdae 	bl	80011e8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800169c:	f7ff ffb4 	bl	8001608 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016a2:	e012      	b.n	80016ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016a4:	f7ff ffb0 	bl	8001608 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b0a      	cmp	r3, #10
 80016b0:	d90b      	bls.n	80016ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2205      	movs	r2, #5
 80016c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0c5      	b.n	8001856 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0e5      	beq.n	80016a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0202 	bic.w	r2, r2, #2
 80016e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e8:	f7ff ff8e 	bl	8001608 <HAL_GetTick>
 80016ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ee:	e012      	b.n	8001716 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f0:	f7ff ff8a 	bl	8001608 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b0a      	cmp	r3, #10
 80016fc:	d90b      	bls.n	8001716 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2205      	movs	r2, #5
 800170e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e09f      	b.n	8001856 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e5      	bne.n	80016f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7e1b      	ldrb	r3, [r3, #24]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d108      	bne.n	800173e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e007      	b.n	800174e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7e5b      	ldrb	r3, [r3, #25]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e007      	b.n	8001778 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001776:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e9b      	ldrb	r3, [r3, #26]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d108      	bne.n	8001792 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0220 	orr.w	r2, r2, #32
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e007      	b.n	80017a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0220 	bic.w	r2, r2, #32
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7edb      	ldrb	r3, [r3, #27]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0210 	bic.w	r2, r2, #16
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	e007      	b.n	80017cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0210 	orr.w	r2, r2, #16
 80017ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7f1b      	ldrb	r3, [r3, #28]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d108      	bne.n	80017e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0208 	orr.w	r2, r2, #8
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e007      	b.n	80017f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0208 	bic.w	r2, r2, #8
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7f5b      	ldrb	r3, [r3, #29]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0204 	orr.w	r2, r2, #4
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e007      	b.n	8001820 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 0204 	bic.w	r2, r2, #4
 800181e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	ea42 0103 	orr.w	r1, r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	1e5a      	subs	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	430a      	orrs	r2, r1
 8001844:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001876:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001878:	7cfb      	ldrb	r3, [r7, #19]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d003      	beq.n	8001886 <HAL_CAN_ConfigFilter+0x26>
 800187e:	7cfb      	ldrb	r3, [r7, #19]
 8001880:	2b02      	cmp	r3, #2
 8001882:	f040 80c7 	bne.w	8001a14 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <HAL_CAN_ConfigFilter+0x1d0>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d001      	beq.n	8001894 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001890:	4b68      	ldr	r3, [pc, #416]	@ (8001a34 <HAL_CAN_ConfigFilter+0x1d4>)
 8001892:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	4a63      	ldr	r2, [pc, #396]	@ (8001a34 <HAL_CAN_ConfigFilter+0x1d4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d111      	bne.n	80018d0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018b2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	431a      	orrs	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f003 031f 	and.w	r3, r3, #31
 80018d8:	2201      	movs	r2, #1
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d123      	bne.n	8001942 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800191c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3248      	adds	r2, #72	@ 0x48
 8001922:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001936:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001938:	6979      	ldr	r1, [r7, #20]
 800193a:	3348      	adds	r3, #72	@ 0x48
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	440b      	add	r3, r1
 8001940:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d122      	bne.n	8001990 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	431a      	orrs	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800196a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3248      	adds	r2, #72	@ 0x48
 8001970:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001984:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001986:	6979      	ldr	r1, [r7, #20]
 8001988:	3348      	adds	r3, #72	@ 0x48
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	440b      	add	r3, r1
 800198e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d109      	bne.n	80019ac <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80019aa:	e007      	b.n	80019bc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80019d6:	e007      	b.n	80019e8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	431a      	orrs	r2, r3
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	431a      	orrs	r2, r3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001a06:	f023 0201 	bic.w	r2, r3, #1
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e006      	b.n	8001a22 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
  }
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40003400 	.word	0x40003400
 8001a34:	40006400 	.word	0x40006400

08001a38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d12e      	bne.n	8001aaa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0201 	bic.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff fdd0 	bl	8001608 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a6a:	e012      	b.n	8001a92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a6c:	f7ff fdcc 	bl	8001608 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b0a      	cmp	r3, #10
 8001a78:	d90b      	bls.n	8001a92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2205      	movs	r2, #5
 8001a8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e012      	b.n	8001ab8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1e5      	bne.n	8001a6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e006      	b.n	8001ab8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
  }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad6:	7dfb      	ldrb	r3, [r7, #23]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d003      	beq.n	8001ae4 <HAL_CAN_GetRxMessage+0x24>
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	f040 8103 	bne.w	8001cea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d10e      	bne.n	8001b08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d116      	bne.n	8001b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0f7      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0e8      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	331b      	adds	r3, #27
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0204 	and.w	r2, r3, #4
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10c      	bne.n	8001b5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	331b      	adds	r3, #27
 8001b4c:	011b      	lsls	r3, r3, #4
 8001b4e:	4413      	add	r3, r2
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	0d5b      	lsrs	r3, r3, #21
 8001b54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e00b      	b.n	8001b76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	331b      	adds	r3, #27
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	4413      	add	r3, r2
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	331b      	adds	r3, #27
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	4413      	add	r3, r2
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0202 	and.w	r2, r3, #2
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	331b      	adds	r3, #27
 8001b94:	011b      	lsls	r3, r3, #4
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	611a      	str	r2, [r3, #16]
 8001baa:	e00b      	b.n	8001bc4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	331b      	adds	r3, #27
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3304      	adds	r3, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 020f 	and.w	r2, r3, #15
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	331b      	adds	r3, #27
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	4413      	add	r3, r2
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	331b      	adds	r3, #27
 8001be4:	011b      	lsls	r3, r3, #4
 8001be6:	4413      	add	r3, r2
 8001be8:	3304      	adds	r3, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	4413      	add	r3, r2
 8001c14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	0a1a      	lsrs	r2, r3, #8
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	011b      	lsls	r3, r3, #4
 8001c2c:	4413      	add	r3, r2
 8001c2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0c1a      	lsrs	r2, r3, #16
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e1a      	lsrs	r2, r3, #24
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	3303      	adds	r3, #3
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	0a1a      	lsrs	r2, r3, #8
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3305      	adds	r3, #5
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	0c1a      	lsrs	r2, r3, #16
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	3306      	adds	r3, #6
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e1a      	lsrs	r2, r3, #24
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	3307      	adds	r3, #7
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d108      	bne.n	8001cd6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	60da      	str	r2, [r3, #12]
 8001cd4:	e007      	b.n	8001ce6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0220 	orr.w	r2, r2, #32
 8001ce4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e006      	b.n	8001cf8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
  }
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d14:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d002      	beq.n	8001d22 <HAL_CAN_ActivateNotification+0x1e>
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d109      	bne.n	8001d36 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6959      	ldr	r1, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e006      	b.n	8001d44 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
  }
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	@ 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d07c      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f983 	bl	80020be <HAL_CAN_TxMailbox0CompleteCallback>
 8001db8:	e016      	b.n	8001de8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	e00c      	b.n	8001de8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de0:	e002      	b.n	8001de8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f989 	bl	80020fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d024      	beq.n	8001e3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dfa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f963 	bl	80020d2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e0c:	e016      	b.n	8001e3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e20:	e00c      	b.n	8001e3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d004      	beq.n	8001e36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e34:	e002      	b.n	8001e3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f969 	bl	800210e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d024      	beq.n	8001e90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f943 	bl	80020e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8001e60:	e016      	b.n	8001e90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e74:	e00c      	b.n	8001e90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d004      	beq.n	8001e8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e88:	e002      	b.n	8001e90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f949 	bl	8002122 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e90:	6a3b      	ldr	r3, [r7, #32]
 8001e92:	f003 0308 	and.w	r3, r3, #8
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eaa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2210      	movs	r2, #16
 8001eb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d006      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2208      	movs	r2, #8
 8001ece:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 f930 	bl	8002136 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7fe ffc0 	bl	8000e74 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f912 	bl	800215e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f8f9 	bl	800214a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2210      	movs	r2, #16
 8001f72:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8fc 	bl	8002172 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00b      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d006      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2208      	movs	r2, #8
 8001f94:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8f5 	bl	8002186 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d07b      	beq.n	800209e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d072      	beq.n	8002096 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d008      	beq.n	8002004 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800200a:	2b00      	cmp	r3, #0
 800200c:	d043      	beq.n	8002096 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03e      	beq.n	8002096 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800201e:	2b60      	cmp	r3, #96	@ 0x60
 8002020:	d02b      	beq.n	800207a <HAL_CAN_IRQHandler+0x32a>
 8002022:	2b60      	cmp	r3, #96	@ 0x60
 8002024:	d82e      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 8002026:	2b50      	cmp	r3, #80	@ 0x50
 8002028:	d022      	beq.n	8002070 <HAL_CAN_IRQHandler+0x320>
 800202a:	2b50      	cmp	r3, #80	@ 0x50
 800202c:	d82a      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 800202e:	2b40      	cmp	r3, #64	@ 0x40
 8002030:	d019      	beq.n	8002066 <HAL_CAN_IRQHandler+0x316>
 8002032:	2b40      	cmp	r3, #64	@ 0x40
 8002034:	d826      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 8002036:	2b30      	cmp	r3, #48	@ 0x30
 8002038:	d010      	beq.n	800205c <HAL_CAN_IRQHandler+0x30c>
 800203a:	2b30      	cmp	r3, #48	@ 0x30
 800203c:	d822      	bhi.n	8002084 <HAL_CAN_IRQHandler+0x334>
 800203e:	2b10      	cmp	r3, #16
 8002040:	d002      	beq.n	8002048 <HAL_CAN_IRQHandler+0x2f8>
 8002042:	2b20      	cmp	r3, #32
 8002044:	d005      	beq.n	8002052 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002046:	e01d      	b.n	8002084 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204a:	f043 0308 	orr.w	r3, r3, #8
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002050:	e019      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	f043 0310 	orr.w	r3, r3, #16
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800205a:	e014      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	f043 0320 	orr.w	r3, r3, #32
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002064:	e00f      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800206e:	e00a      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002078:	e005      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002082:	e000      	b.n	8002086 <HAL_CAN_IRQHandler+0x336>
            break;
 8002084:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699a      	ldr	r2, [r3, #24]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002094:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2204      	movs	r2, #4
 800209c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80020a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f872 	bl	800219a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	@ 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b083      	sub	sp, #12
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800210e:	b480      	push	{r7}
 8002110:	b083      	sub	sp, #12
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
	...

080021b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <__NVIC_SetPriorityGrouping+0x40>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021cc:	4013      	ands	r3, r2
 80021ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021de:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <__NVIC_SetPriorityGrouping+0x40>)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	60d3      	str	r3, [r2, #12]
}
 80021e4:	bf00      	nop
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	e000ed00 	.word	0xe000ed00
 80021f4:	05fa0000 	.word	0x05fa0000

080021f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021fc:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <__NVIC_GetPriorityGrouping+0x18>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	f003 0307 	and.w	r3, r3, #7
}
 8002206:	4618      	mov	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	2b00      	cmp	r3, #0
 8002224:	db0b      	blt.n	800223e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4907      	ldr	r1, [pc, #28]	@ (800224c <__NVIC_EnableIRQ+0x38>)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	2001      	movs	r0, #1
 8002236:	fa00 f202 	lsl.w	r2, r0, r2
 800223a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	e000e100 	.word	0xe000e100

08002250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db0a      	blt.n	800227a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	490c      	ldr	r1, [pc, #48]	@ (800229c <__NVIC_SetPriority+0x4c>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	440b      	add	r3, r1
 8002274:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002278:	e00a      	b.n	8002290 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	b2da      	uxtb	r2, r3
 800227e:	4908      	ldr	r1, [pc, #32]	@ (80022a0 <__NVIC_SetPriority+0x50>)
 8002280:	79fb      	ldrb	r3, [r7, #7]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	3b04      	subs	r3, #4
 8002288:	0112      	lsls	r2, r2, #4
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	440b      	add	r3, r1
 800228e:	761a      	strb	r2, [r3, #24]
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000e100 	.word	0xe000e100
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f1c3 0307 	rsb	r3, r3, #7
 80022be:	2b04      	cmp	r3, #4
 80022c0:	bf28      	it	cs
 80022c2:	2304      	movcs	r3, #4
 80022c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3304      	adds	r3, #4
 80022ca:	2b06      	cmp	r3, #6
 80022cc:	d902      	bls.n	80022d4 <NVIC_EncodePriority+0x30>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3b03      	subs	r3, #3
 80022d2:	e000      	b.n	80022d6 <NVIC_EncodePriority+0x32>
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d8:	f04f 32ff 	mov.w	r2, #4294967295
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43da      	mvns	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	401a      	ands	r2, r3
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	43d9      	mvns	r1, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022fc:	4313      	orrs	r3, r2
         );
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3724      	adds	r7, #36	@ 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800231c:	d301      	bcc.n	8002322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800231e:	2301      	movs	r3, #1
 8002320:	e00f      	b.n	8002342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <SysTick_Config+0x40>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800232a:	210f      	movs	r1, #15
 800232c:	f04f 30ff 	mov.w	r0, #4294967295
 8002330:	f7ff ff8e 	bl	8002250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002334:	4b05      	ldr	r3, [pc, #20]	@ (800234c <SysTick_Config+0x40>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800233a:	4b04      	ldr	r3, [pc, #16]	@ (800234c <SysTick_Config+0x40>)
 800233c:	2207      	movs	r2, #7
 800233e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	e000e010 	.word	0xe000e010

08002350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff29 	bl	80021b0 <__NVIC_SetPriorityGrouping>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002366:	b580      	push	{r7, lr}
 8002368:	b086      	sub	sp, #24
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002378:	f7ff ff3e 	bl	80021f8 <__NVIC_GetPriorityGrouping>
 800237c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	6978      	ldr	r0, [r7, #20]
 8002384:	f7ff ff8e 	bl	80022a4 <NVIC_EncodePriority>
 8002388:	4602      	mov	r2, r0
 800238a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff5d 	bl	8002250 <__NVIC_SetPriority>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b082      	sub	sp, #8
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	4603      	mov	r3, r0
 80023a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff31 	bl	8002214 <__NVIC_EnableIRQ>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffa2 	bl	800230c <SysTick_Config>
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023d8:	f3bf 8f5f 	dmb	sy
}
 80023dc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80023de:	4b07      	ldr	r3, [pc, #28]	@ (80023fc <HAL_MPU_Disable+0x28>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	4a06      	ldr	r2, [pc, #24]	@ (80023fc <HAL_MPU_Disable+0x28>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e8:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80023ea:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_MPU_Disable+0x2c>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	605a      	str	r2, [r3, #4]
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000ed00 	.word	0xe000ed00
 8002400:	e000ed90 	.word	0xe000ed90

08002404 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800240c:	4a0b      	ldr	r2, [pc, #44]	@ (800243c <HAL_MPU_Enable+0x38>)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002416:	4b0a      	ldr	r3, [pc, #40]	@ (8002440 <HAL_MPU_Enable+0x3c>)
 8002418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241a:	4a09      	ldr	r2, [pc, #36]	@ (8002440 <HAL_MPU_Enable+0x3c>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002420:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002422:	f3bf 8f4f 	dsb	sy
}
 8002426:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002428:	f3bf 8f6f 	isb	sy
}
 800242c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed90 	.word	0xe000ed90
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	785a      	ldrb	r2, [r3, #1]
 8002450:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <HAL_MPU_ConfigRegion+0x7c>)
 8002452:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002454:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <HAL_MPU_ConfigRegion+0x7c>)
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	4a19      	ldr	r2, [pc, #100]	@ (80024c0 <HAL_MPU_ConfigRegion+0x7c>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002460:	4a17      	ldr	r2, [pc, #92]	@ (80024c0 <HAL_MPU_ConfigRegion+0x7c>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7b1b      	ldrb	r3, [r3, #12]
 800246c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	7adb      	ldrb	r3, [r3, #11]
 8002472:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002474:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7a9b      	ldrb	r3, [r3, #10]
 800247a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800247c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7b5b      	ldrb	r3, [r3, #13]
 8002482:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7b9b      	ldrb	r3, [r3, #14]
 800248a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800248c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7bdb      	ldrb	r3, [r3, #15]
 8002492:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	7a5b      	ldrb	r3, [r3, #9]
 800249a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800249c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7a1b      	ldrb	r3, [r3, #8]
 80024a2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80024a4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024ac:	4a04      	ldr	r2, [pc, #16]	@ (80024c0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80024ae:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80024b0:	6113      	str	r3, [r2, #16]
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed90 	.word	0xe000ed90

080024c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024d2:	f7ff f899 	bl	8001608 <HAL_GetTick>
 80024d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d008      	beq.n	80024f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2280      	movs	r2, #128	@ 0x80
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e052      	b.n	800259c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002514:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_Abort+0x62>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002546:	e013      	b.n	8002570 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002548:	f7ff f85e 	bl	8001608 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b05      	cmp	r3, #5
 8002554:	d90c      	bls.n	8002570 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2203      	movs	r2, #3
 8002560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e015      	b.n	800259c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e4      	bne.n	8002548 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002582:	223f      	movs	r2, #63	@ 0x3f
 8002584:	409a      	lsls	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d004      	beq.n	80025c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00c      	b.n	80025dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2205      	movs	r2, #5
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e175      	b.n	80028f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002608:	2201      	movs	r2, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	f040 8164 	bne.w	80028ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d005      	beq.n	800263e <HAL_GPIO_Init+0x56>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d130      	bne.n	80026a0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2203      	movs	r2, #3
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002674:	2201      	movs	r2, #1
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 0201 	and.w	r2, r3, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d017      	beq.n	80026dc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	2203      	movs	r2, #3
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d123      	bne.n	8002730 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	08da      	lsrs	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3208      	adds	r2, #8
 80026f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	220f      	movs	r2, #15
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	08da      	lsrs	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3208      	adds	r2, #8
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0203 	and.w	r2, r3, #3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80be 	beq.w	80028ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	4b66      	ldr	r3, [pc, #408]	@ (800290c <HAL_GPIO_Init+0x324>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002776:	4a65      	ldr	r2, [pc, #404]	@ (800290c <HAL_GPIO_Init+0x324>)
 8002778:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800277c:	6453      	str	r3, [r2, #68]	@ 0x44
 800277e:	4b63      	ldr	r3, [pc, #396]	@ (800290c <HAL_GPIO_Init+0x324>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800278a:	4a61      	ldr	r2, [pc, #388]	@ (8002910 <HAL_GPIO_Init+0x328>)
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a58      	ldr	r2, [pc, #352]	@ (8002914 <HAL_GPIO_Init+0x32c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d037      	beq.n	8002826 <HAL_GPIO_Init+0x23e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a57      	ldr	r2, [pc, #348]	@ (8002918 <HAL_GPIO_Init+0x330>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d031      	beq.n	8002822 <HAL_GPIO_Init+0x23a>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a56      	ldr	r2, [pc, #344]	@ (800291c <HAL_GPIO_Init+0x334>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d02b      	beq.n	800281e <HAL_GPIO_Init+0x236>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a55      	ldr	r2, [pc, #340]	@ (8002920 <HAL_GPIO_Init+0x338>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d025      	beq.n	800281a <HAL_GPIO_Init+0x232>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a54      	ldr	r2, [pc, #336]	@ (8002924 <HAL_GPIO_Init+0x33c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d01f      	beq.n	8002816 <HAL_GPIO_Init+0x22e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a53      	ldr	r2, [pc, #332]	@ (8002928 <HAL_GPIO_Init+0x340>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d019      	beq.n	8002812 <HAL_GPIO_Init+0x22a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a52      	ldr	r2, [pc, #328]	@ (800292c <HAL_GPIO_Init+0x344>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x226>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a51      	ldr	r2, [pc, #324]	@ (8002930 <HAL_GPIO_Init+0x348>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x222>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a50      	ldr	r2, [pc, #320]	@ (8002934 <HAL_GPIO_Init+0x34c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x21e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002938 <HAL_GPIO_Init+0x350>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x21a>
 80027fe:	2309      	movs	r3, #9
 8002800:	e012      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002802:	230a      	movs	r3, #10
 8002804:	e010      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002806:	2308      	movs	r3, #8
 8002808:	e00e      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800280a:	2307      	movs	r3, #7
 800280c:	e00c      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800280e:	2306      	movs	r3, #6
 8002810:	e00a      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002812:	2305      	movs	r3, #5
 8002814:	e008      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002816:	2304      	movs	r3, #4
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800281a:	2303      	movs	r3, #3
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x240>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x240>
 8002826:	2300      	movs	r3, #0
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002838:	4935      	ldr	r1, [pc, #212]	@ (8002910 <HAL_GPIO_Init+0x328>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_GPIO_Init+0x354>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286a:	4a34      	ldr	r2, [pc, #208]	@ (800293c <HAL_GPIO_Init+0x354>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002870:	4b32      	ldr	r3, [pc, #200]	@ (800293c <HAL_GPIO_Init+0x354>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002894:	4a29      	ldr	r2, [pc, #164]	@ (800293c <HAL_GPIO_Init+0x354>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289a:	4b28      	ldr	r3, [pc, #160]	@ (800293c <HAL_GPIO_Init+0x354>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028be:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <HAL_GPIO_Init+0x354>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c4:	4b1d      	ldr	r3, [pc, #116]	@ (800293c <HAL_GPIO_Init+0x354>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e8:	4a14      	ldr	r2, [pc, #80]	@ (800293c <HAL_GPIO_Init+0x354>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	f67f ae86 	bls.w	8002608 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3724      	adds	r7, #36	@ 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40013800 	.word	0x40013800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40021400 	.word	0x40021400
 800292c:	40021800 	.word	0x40021800
 8002930:	40021c00 	.word	0x40021c00
 8002934:	40022000 	.word	0x40022000
 8002938:	40022400 	.word	0x40022400
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002948:	2300      	movs	r3, #0
 800294a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e29b      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8087 	beq.w	8002a72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002964:	4b96      	ldr	r3, [pc, #600]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	2b04      	cmp	r3, #4
 800296e:	d00c      	beq.n	800298a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002970:	4b93      	ldr	r3, [pc, #588]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	2b08      	cmp	r3, #8
 800297a:	d112      	bne.n	80029a2 <HAL_RCC_OscConfig+0x62>
 800297c:	4b90      	ldr	r3, [pc, #576]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002984:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002988:	d10b      	bne.n	80029a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d06c      	beq.n	8002a70 <HAL_RCC_OscConfig+0x130>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d168      	bne.n	8002a70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e275      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029aa:	d106      	bne.n	80029ba <HAL_RCC_OscConfig+0x7a>
 80029ac:	4b84      	ldr	r3, [pc, #528]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a83      	ldr	r2, [pc, #524]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	e02e      	b.n	8002a18 <HAL_RCC_OscConfig+0xd8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x9c>
 80029c2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a7b      	ldr	r2, [pc, #492]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e01d      	b.n	8002a18 <HAL_RCC_OscConfig+0xd8>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029e4:	d10c      	bne.n	8002a00 <HAL_RCC_OscConfig+0xc0>
 80029e6:	4b76      	ldr	r3, [pc, #472]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a75      	ldr	r2, [pc, #468]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	4b73      	ldr	r3, [pc, #460]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 80029f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e00b      	b.n	8002a18 <HAL_RCC_OscConfig+0xd8>
 8002a00:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a6b      	ldr	r2, [pc, #428]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe fdf2 	bl	8001608 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a28:	f7fe fdee 	bl	8001608 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	@ 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e229      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3a:	4b61      	ldr	r3, [pc, #388]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCC_OscConfig+0xe8>
 8002a46:	e014      	b.n	8002a72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fdde 	bl	8001608 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a50:	f7fe fdda 	bl	8001608 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	@ 0x64
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e215      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a62:	4b57      	ldr	r3, [pc, #348]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x110>
 8002a6e:	e000      	b.n	8002a72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d069      	beq.n	8002b52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a7e:	4b50      	ldr	r3, [pc, #320]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 030c 	and.w	r3, r3, #12
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00b      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d11c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x190>
 8002a96:	4b4a      	ldr	r3, [pc, #296]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa2:	4b47      	ldr	r3, [pc, #284]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_RCC_OscConfig+0x17a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e1e9      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aba:	4b41      	ldr	r3, [pc, #260]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	493d      	ldr	r1, [pc, #244]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ace:	e040      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad8:	4b39      	ldr	r3, [pc, #228]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a38      	ldr	r2, [pc, #224]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fd90 	bl	8001608 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fe fd8c 	bl	8001608 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e1c7      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afe:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0f0      	beq.n	8002aec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4929      	ldr	r1, [pc, #164]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
 8002b1e:	e018      	b.n	8002b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b20:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a26      	ldr	r2, [pc, #152]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fd6c 	bl	8001608 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b34:	f7fe fd68 	bl	8001608 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1a3      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b46:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d038      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d019      	beq.n	8002b9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b66:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6a:	4a15      	ldr	r2, [pc, #84]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b72:	f7fe fd49 	bl	8001608 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7a:	f7fe fd45 	bl	8001608 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e180      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x23a>
 8002b98:	e01a      	b.n	8002bd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9e:	4a08      	ldr	r2, [pc, #32]	@ (8002bc0 <HAL_RCC_OscConfig+0x280>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba6:	f7fe fd2f 	bl	8001608 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	e00a      	b.n	8002bc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bae:	f7fe fd2b 	bl	8001608 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d903      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e166      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
 8002bc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bc4:	4b92      	ldr	r3, [pc, #584]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002bc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1ee      	bne.n	8002bae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80a4 	beq.w	8002d26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bde:	4b8c      	ldr	r3, [pc, #560]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bea:	4b89      	ldr	r3, [pc, #548]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	4a88      	ldr	r2, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf6:	4b86      	ldr	r3, [pc, #536]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c02:	2301      	movs	r3, #1
 8002c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c06:	4b83      	ldr	r3, [pc, #524]	@ (8002e14 <HAL_RCC_OscConfig+0x4d4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d118      	bne.n	8002c44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c12:	4b80      	ldr	r3, [pc, #512]	@ (8002e14 <HAL_RCC_OscConfig+0x4d4>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a7f      	ldr	r2, [pc, #508]	@ (8002e14 <HAL_RCC_OscConfig+0x4d4>)
 8002c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fcf3 	bl	8001608 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c26:	f7fe fcef 	bl	8001608 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b64      	cmp	r3, #100	@ 0x64
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e12a      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c38:	4b76      	ldr	r3, [pc, #472]	@ (8002e14 <HAL_RCC_OscConfig+0x4d4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0f0      	beq.n	8002c26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d106      	bne.n	8002c5a <HAL_RCC_OscConfig+0x31a>
 8002c4c:	4b70      	ldr	r3, [pc, #448]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a6f      	ldr	r2, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c58:	e02d      	b.n	8002cb6 <HAL_RCC_OscConfig+0x376>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCC_OscConfig+0x33c>
 8002c62:	4b6b      	ldr	r3, [pc, #428]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c66:	4a6a      	ldr	r2, [pc, #424]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6e:	4b68      	ldr	r3, [pc, #416]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c72:	4a67      	ldr	r2, [pc, #412]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c74:	f023 0304 	bic.w	r3, r3, #4
 8002c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7a:	e01c      	b.n	8002cb6 <HAL_RCC_OscConfig+0x376>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d10c      	bne.n	8002c9e <HAL_RCC_OscConfig+0x35e>
 8002c84:	4b62      	ldr	r3, [pc, #392]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c88:	4a61      	ldr	r2, [pc, #388]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c8a:	f043 0304 	orr.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c90:	4b5f      	ldr	r3, [pc, #380]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c94:	4a5e      	ldr	r2, [pc, #376]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x376>
 8002c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	f023 0301 	bic.w	r3, r3, #1
 8002ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002caa:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	4a58      	ldr	r2, [pc, #352]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	f023 0304 	bic.w	r3, r3, #4
 8002cb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cbe:	f7fe fca3 	bl	8001608 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe fc9f 	bl	8001608 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e0d8      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cdc:	4b4c      	ldr	r3, [pc, #304]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0ee      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x386>
 8002ce8:	e014      	b.n	8002d14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cea:	f7fe fc8d 	bl	8001608 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf2:	f7fe fc89 	bl	8001608 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0c2      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d08:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80ae 	beq.w	8002e8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d30:	4b37      	ldr	r3, [pc, #220]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d06d      	beq.n	8002e18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d14b      	bne.n	8002ddc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b32      	ldr	r3, [pc, #200]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a31      	ldr	r2, [pc, #196]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fc5a 	bl	8001608 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d58:	f7fe fc56 	bl	8001608 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e091      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	4b29      	ldr	r3, [pc, #164]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1f0      	bne.n	8002d58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69da      	ldr	r2, [r3, #28]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d84:	019b      	lsls	r3, r3, #6
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d98:	061b      	lsls	r3, r3, #24
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	071b      	lsls	r3, r3, #28
 8002da2:	491b      	ldr	r1, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002da8:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a18      	ldr	r2, [pc, #96]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002dae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe fc28 	bl	8001608 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fc24 	bl	8001608 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e05f      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x47c>
 8002dda:	e057      	b.n	8002e8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de8:	f7fe fc0e 	bl	8001608 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe fc0a 	bl	8001608 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e045      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <HAL_RCC_OscConfig+0x4d0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x4b0>
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x54c>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002e18:	4b1f      	ldr	r3, [pc, #124]	@ (8002e98 <HAL_RCC_OscConfig+0x558>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d030      	beq.n	8002e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d129      	bne.n	8002e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d122      	bne.n	8002e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d119      	bne.n	8002e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	085b      	lsrs	r3, r3, #1
 8002e60:	3b01      	subs	r3, #1
 8002e62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d10f      	bne.n	8002e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0d0      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 030f 	and.w	r3, r3, #15
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d910      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b67      	ldr	r3, [pc, #412]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 020f 	bic.w	r2, r3, #15
 8002eca:	4965      	ldr	r1, [pc, #404]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed2:	4b63      	ldr	r3, [pc, #396]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 030f 	and.w	r3, r3, #15
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0b8      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002efc:	4b59      	ldr	r3, [pc, #356]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4a58      	ldr	r2, [pc, #352]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f14:	4b53      	ldr	r3, [pc, #332]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a52      	ldr	r2, [pc, #328]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f20:	4b50      	ldr	r3, [pc, #320]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	494d      	ldr	r1, [pc, #308]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d040      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d107      	bne.n	8002f56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f46:	4b47      	ldr	r3, [pc, #284]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d115      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e07f      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5e:	4b41      	ldr	r3, [pc, #260]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d109      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e073      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06b      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7e:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f023 0203 	bic.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4936      	ldr	r1, [pc, #216]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe fb3a 	bl	8001608 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fe fb36 	bl	8001608 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e053      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	4b2d      	ldr	r3, [pc, #180]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 020c 	and.w	r2, r3, #12
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d1eb      	bne.n	8002f98 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b27      	ldr	r3, [pc, #156]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 030f 	and.w	r3, r3, #15
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d210      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b24      	ldr	r3, [pc, #144]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 020f 	bic.w	r2, r3, #15
 8002fd6:	4922      	ldr	r1, [pc, #136]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e032      	b.n	8003056 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffc:	4b19      	ldr	r3, [pc, #100]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4916      	ldr	r1, [pc, #88]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800301a:	4b12      	ldr	r3, [pc, #72]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	490e      	ldr	r1, [pc, #56]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800302e:	f000 f821 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b0b      	ldr	r3, [pc, #44]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	490a      	ldr	r1, [pc, #40]	@ (8003068 <HAL_RCC_ClockConfig+0x1cc>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <HAL_RCC_ClockConfig+0x1d0>)
 8003048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800304a:	4b09      	ldr	r3, [pc, #36]	@ (8003070 <HAL_RCC_ClockConfig+0x1d4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f7fe fa96 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00
 8003064:	40023800 	.word	0x40023800
 8003068:	08005ce0 	.word	0x08005ce0
 800306c:	20000004 	.word	0x20000004
 8003070:	20000008 	.word	0x20000008

08003074 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003078:	b090      	sub	sp, #64	@ 0x40
 800307a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800307c:	2300      	movs	r3, #0
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003080:	2300      	movs	r3, #0
 8003082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003084:	2300      	movs	r3, #0
 8003086:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003088:	2300      	movs	r3, #0
 800308a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308c:	4b59      	ldr	r3, [pc, #356]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 030c 	and.w	r3, r3, #12
 8003094:	2b08      	cmp	r3, #8
 8003096:	d00d      	beq.n	80030b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003098:	2b08      	cmp	r3, #8
 800309a:	f200 80a1 	bhi.w	80031e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x34>
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_RCC_GetSysClockFreq+0x3a>
 80030a6:	e09b      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030a8:	4b53      	ldr	r3, [pc, #332]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80030aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030ac:	e09b      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ae:	4b53      	ldr	r3, [pc, #332]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x188>)
 80030b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030b2:	e098      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030b4:	4b4f      	ldr	r3, [pc, #316]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80030be:	4b4d      	ldr	r3, [pc, #308]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d028      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ca:	4b4a      	ldr	r3, [pc, #296]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	099b      	lsrs	r3, r3, #6
 80030d0:	2200      	movs	r2, #0
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80030dc:	2100      	movs	r1, #0
 80030de:	4b47      	ldr	r3, [pc, #284]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x188>)
 80030e0:	fb03 f201 	mul.w	r2, r3, r1
 80030e4:	2300      	movs	r3, #0
 80030e6:	fb00 f303 	mul.w	r3, r0, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	4a43      	ldr	r2, [pc, #268]	@ (80031fc <HAL_RCC_GetSysClockFreq+0x188>)
 80030ee:	fba0 1202 	umull	r1, r2, r0, r2
 80030f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f4:	460a      	mov	r2, r1
 80030f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030fa:	4413      	add	r3, r2
 80030fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003100:	2200      	movs	r2, #0
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	61fa      	str	r2, [r7, #28]
 8003106:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800310a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800310e:	f7fd f8ef 	bl	80002f0 <__aeabi_uldivmod>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4613      	mov	r3, r2
 8003118:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800311a:	e053      	b.n	80031c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311c:	4b35      	ldr	r3, [pc, #212]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	2200      	movs	r2, #0
 8003124:	613b      	str	r3, [r7, #16]
 8003126:	617a      	str	r2, [r7, #20]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800312e:	f04f 0b00 	mov.w	fp, #0
 8003132:	4652      	mov	r2, sl
 8003134:	465b      	mov	r3, fp
 8003136:	f04f 0000 	mov.w	r0, #0
 800313a:	f04f 0100 	mov.w	r1, #0
 800313e:	0159      	lsls	r1, r3, #5
 8003140:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003144:	0150      	lsls	r0, r2, #5
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	ebb2 080a 	subs.w	r8, r2, sl
 800314e:	eb63 090b 	sbc.w	r9, r3, fp
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800315e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003162:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003166:	ebb2 0408 	subs.w	r4, r2, r8
 800316a:	eb63 0509 	sbc.w	r5, r3, r9
 800316e:	f04f 0200 	mov.w	r2, #0
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	00eb      	lsls	r3, r5, #3
 8003178:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800317c:	00e2      	lsls	r2, r4, #3
 800317e:	4614      	mov	r4, r2
 8003180:	461d      	mov	r5, r3
 8003182:	eb14 030a 	adds.w	r3, r4, sl
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	eb45 030b 	adc.w	r3, r5, fp
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	e9d7 4500 	ldrd	r4, r5, [r7]
 800319a:	4629      	mov	r1, r5
 800319c:	028b      	lsls	r3, r1, #10
 800319e:	4621      	mov	r1, r4
 80031a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031a4:	4621      	mov	r1, r4
 80031a6:	028a      	lsls	r2, r1, #10
 80031a8:	4610      	mov	r0, r2
 80031aa:	4619      	mov	r1, r3
 80031ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ae:	2200      	movs	r2, #0
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	60fa      	str	r2, [r7, #12]
 80031b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031b8:	f7fd f89a 	bl	80002f0 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4613      	mov	r3, r2
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80031d4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80031d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031de:	e002      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031e0:	4b05      	ldr	r3, [pc, #20]	@ (80031f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80031e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3740      	adds	r7, #64	@ 0x40
 80031ec:	46bd      	mov	sp, r7
 80031ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	00f42400 	.word	0x00f42400
 80031fc:	017d7840 	.word	0x017d7840

08003200 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003204:	4b03      	ldr	r3, [pc, #12]	@ (8003214 <HAL_RCC_GetHCLKFreq+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000004 	.word	0x20000004

08003218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800321c:	f7ff fff0 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003220:	4602      	mov	r2, r0
 8003222:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	0a9b      	lsrs	r3, r3, #10
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	4903      	ldr	r1, [pc, #12]	@ (800323c <HAL_RCC_GetPCLK1Freq+0x24>)
 800322e:	5ccb      	ldrb	r3, [r1, r3]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800
 800323c:	08005cf0 	.word	0x08005cf0

08003240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003244:	f7ff ffdc 	bl	8003200 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b05      	ldr	r3, [pc, #20]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0b5b      	lsrs	r3, r3, #13
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4903      	ldr	r1, [pc, #12]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40023800 	.word	0x40023800
 8003264:	08005cf0 	.word	0x08005cf0

08003268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003290:	4b69      	ldr	r3, [pc, #420]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a68      	ldr	r2, [pc, #416]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003296:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800329a:	6093      	str	r3, [r2, #8]
 800329c:	4b66      	ldr	r3, [pc, #408]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a4:	4964      	ldr	r1, [pc, #400]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d017      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032c8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	4959      	ldr	r1, [pc, #356]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032e0:	d101      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d017      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003300:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003304:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330c:	494a      	ldr	r1, [pc, #296]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800331c:	d101      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800332a:	2301      	movs	r3, #1
 800332c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 808b 	beq.w	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800334c:	4b3a      	ldr	r3, [pc, #232]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003350:	4a39      	ldr	r2, [pc, #228]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003356:	6413      	str	r3, [r2, #64]	@ 0x40
 8003358:	4b37      	ldr	r3, [pc, #220]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003364:	4b35      	ldr	r3, [pc, #212]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a34      	ldr	r2, [pc, #208]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003370:	f7fe f94a 	bl	8001608 <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003378:	f7fe f946 	bl	8001608 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	@ 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e38f      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800338a:	4b2c      	ldr	r3, [pc, #176]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003396:	4b28      	ldr	r3, [pc, #160]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d035      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d02e      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033b4:	4b20      	ldr	r3, [pc, #128]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033be:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033d6:	4a18      	ldr	r2, [pc, #96]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033dc:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d114      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe f90e 	bl	8001608 <HAL_GetTick>
 80033ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe f90a 	bl	8001608 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e351      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003406:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0ee      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800341a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800341e:	d111      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003420:	4b05      	ldr	r3, [pc, #20]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800342c:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800342e:	400b      	ands	r3, r1
 8003430:	4901      	ldr	r1, [pc, #4]	@ (8003438 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	608b      	str	r3, [r1, #8]
 8003436:	e00b      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003438:	40023800 	.word	0x40023800
 800343c:	40007000 	.word	0x40007000
 8003440:	0ffffcff 	.word	0x0ffffcff
 8003444:	4bac      	ldr	r3, [pc, #688]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4aab      	ldr	r2, [pc, #684]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800344e:	6093      	str	r3, [r2, #8]
 8003450:	4ba9      	ldr	r3, [pc, #676]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003452:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345c:	49a6      	ldr	r1, [pc, #664]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345e:	4313      	orrs	r3, r2
 8003460:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d010      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800346e:	4ba2      	ldr	r3, [pc, #648]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003474:	4aa0      	ldr	r2, [pc, #640]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800347a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800347e:	4b9e      	ldr	r3, [pc, #632]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003480:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	499b      	ldr	r1, [pc, #620]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800349c:	4b96      	ldr	r3, [pc, #600]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034aa:	4993      	ldr	r1, [pc, #588]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034be:	4b8e      	ldr	r3, [pc, #568]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034cc:	498a      	ldr	r1, [pc, #552]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034e0:	4b85      	ldr	r3, [pc, #532]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ee:	4982      	ldr	r1, [pc, #520]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003502:	4b7d      	ldr	r3, [pc, #500]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003508:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003510:	4979      	ldr	r1, [pc, #484]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003524:	4b74      	ldr	r3, [pc, #464]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003532:	4971      	ldr	r1, [pc, #452]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003546:	4b6c      	ldr	r3, [pc, #432]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354c:	f023 020c 	bic.w	r2, r3, #12
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003554:	4968      	ldr	r1, [pc, #416]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003568:	4b63      	ldr	r3, [pc, #396]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800356e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003576:	4960      	ldr	r1, [pc, #384]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800358a:	4b5b      	ldr	r3, [pc, #364]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003590:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003598:	4957      	ldr	r1, [pc, #348]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035ac:	4b52      	ldr	r3, [pc, #328]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	494f      	ldr	r1, [pc, #316]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80035ce:	4b4a      	ldr	r3, [pc, #296]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035dc:	4946      	ldr	r1, [pc, #280]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035f0:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	493e      	ldr	r1, [pc, #248]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003612:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003618:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003620:	4935      	ldr	r1, [pc, #212]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003634:	4b30      	ldr	r3, [pc, #192]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003642:	492d      	ldr	r1, [pc, #180]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d011      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003656:	4b28      	ldr	r3, [pc, #160]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800365c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003664:	4924      	ldr	r1, [pc, #144]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003674:	d101      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003686:	2301      	movs	r3, #1
 8003688:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003696:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a4:	4914      	ldr	r1, [pc, #80]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00b      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036b8:	4b0f      	ldr	r3, [pc, #60]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036c8:	490b      	ldr	r1, [pc, #44]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00f      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036dc:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036e2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036ec:	4902      	ldr	r1, [pc, #8]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003708:	4b8a      	ldr	r3, [pc, #552]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800370e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003718:	4986      	ldr	r1, [pc, #536]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800371a:	4313      	orrs	r3, r2
 800371c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00b      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800372c:	4b81      	ldr	r3, [pc, #516]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800372e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003732:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800373c:	497d      	ldr	r1, [pc, #500]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d006      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80d6 	beq.w	8003904 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003758:	4b76      	ldr	r3, [pc, #472]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a75      	ldr	r2, [pc, #468]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800375e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003762:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003764:	f7fd ff50 	bl	8001608 <HAL_GetTick>
 8003768:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800376c:	f7fd ff4c 	bl	8001608 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	@ 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e195      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800377e:	4b6d      	ldr	r3, [pc, #436]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d021      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379a:	2b00      	cmp	r3, #0
 800379c:	d11d      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800379e:	4b65      	ldr	r3, [pc, #404]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a4:	0c1b      	lsrs	r3, r3, #16
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037ac:	4b61      	ldr	r3, [pc, #388]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037b2:	0e1b      	lsrs	r3, r3, #24
 80037b4:	f003 030f 	and.w	r3, r3, #15
 80037b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	019a      	lsls	r2, r3, #6
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	041b      	lsls	r3, r3, #16
 80037c4:	431a      	orrs	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	061b      	lsls	r3, r3, #24
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	071b      	lsls	r3, r3, #28
 80037d2:	4958      	ldr	r1, [pc, #352]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d004      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ee:	d00a      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d02e      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003804:	d129      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003806:	4b4b      	ldr	r3, [pc, #300]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800380c:	0c1b      	lsrs	r3, r3, #16
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003814:	4b47      	ldr	r3, [pc, #284]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800381a:	0f1b      	lsrs	r3, r3, #28
 800381c:	f003 0307 	and.w	r3, r3, #7
 8003820:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	019a      	lsls	r2, r3, #6
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	061b      	lsls	r3, r3, #24
 8003834:	431a      	orrs	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	071b      	lsls	r3, r3, #28
 800383a:	493e      	ldr	r1, [pc, #248]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800383c:	4313      	orrs	r3, r2
 800383e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003842:	4b3c      	ldr	r3, [pc, #240]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003844:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003848:	f023 021f 	bic.w	r2, r3, #31
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	3b01      	subs	r3, #1
 8003852:	4938      	ldr	r1, [pc, #224]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d01d      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003866:	4b33      	ldr	r3, [pc, #204]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003874:	4b2f      	ldr	r3, [pc, #188]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800387a:	0f1b      	lsrs	r3, r3, #28
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	019a      	lsls	r2, r3, #6
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	431a      	orrs	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	061b      	lsls	r3, r3, #24
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	4926      	ldr	r1, [pc, #152]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d011      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	019a      	lsls	r2, r3, #6
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	071b      	lsls	r3, r3, #28
 80038ca:	491a      	ldr	r1, [pc, #104]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038d2:	4b18      	ldr	r3, [pc, #96]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a17      	ldr	r2, [pc, #92]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038de:	f7fd fe93 	bl	8001608 <HAL_GetTick>
 80038e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038e6:	f7fd fe8f 	bl	8001608 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b64      	cmp	r3, #100	@ 0x64
 80038f2:	d901      	bls.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e0d8      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	2b01      	cmp	r3, #1
 8003908:	f040 80ce 	bne.w	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800390c:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a08      	ldr	r2, [pc, #32]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd fe76 	bl	8001608 <HAL_GetTick>
 800391c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800391e:	e00b      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003920:	f7fd fe72 	bl	8001608 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	@ 0x64
 800392c:	d904      	bls.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e0bb      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003938:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003944:	d0ec      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003962:	2b00      	cmp	r3, #0
 8003964:	d02e      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d12a      	bne.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800396e:	4b51      	ldr	r3, [pc, #324]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800397c:	4b4d      	ldr	r3, [pc, #308]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800397e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003982:	0f1b      	lsrs	r3, r3, #28
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	019a      	lsls	r2, r3, #6
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	041b      	lsls	r3, r3, #16
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	061b      	lsls	r3, r3, #24
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	071b      	lsls	r3, r3, #28
 80039a2:	4944      	ldr	r1, [pc, #272]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039aa:	4b42      	ldr	r3, [pc, #264]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039b0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	493d      	ldr	r1, [pc, #244]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d022      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039d8:	d11d      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039da:	4b36      	ldr	r3, [pc, #216]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e0:	0e1b      	lsrs	r3, r3, #24
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80039e8:	4b32      	ldr	r3, [pc, #200]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	0f1b      	lsrs	r3, r3, #28
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	019a      	lsls	r2, r3, #6
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	041b      	lsls	r3, r3, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	061b      	lsls	r3, r3, #24
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	071b      	lsls	r3, r3, #28
 8003a0e:	4929      	ldr	r1, [pc, #164]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d028      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a22:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a28:	0e1b      	lsrs	r3, r3, #24
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a30:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a36:	0c1b      	lsrs	r3, r3, #16
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	019a      	lsls	r2, r3, #6
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	041b      	lsls	r3, r3, #16
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	071b      	lsls	r3, r3, #28
 8003a56:	4917      	ldr	r1, [pc, #92]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a5e:	4b15      	ldr	r3, [pc, #84]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	4911      	ldr	r1, [pc, #68]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a74:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fd fdc2 	bl	8001608 <HAL_GetTick>
 8003a84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a88:	f7fd fdbe 	bl	8001608 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e007      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a9a:	4b06      	ldr	r3, [pc, #24]	@ (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003aa6:	d1ef      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800

08003ab8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e040      	b.n	8003b4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fbd0 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	@ 0x24
 8003ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0201 	bic.w	r2, r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fe54 	bl	80047ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fbed 	bl	80042e4 <UART_SetConfig>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e01b      	b.n	8003b4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689a      	ldr	r2, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fed3 	bl	80048f0 <UART_CheckIdleState>
 8003b4a:	4603      	mov	r3, r0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b08b      	sub	sp, #44	@ 0x2c
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	d147      	bne.n	8003bfa <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_UART_Transmit_IT+0x22>
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e040      	b.n	8003bfc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	88fa      	ldrh	r2, [r7, #6]
 8003b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2221      	movs	r2, #33	@ 0x21
 8003ba2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bac:	d107      	bne.n	8003bbe <HAL_UART_Transmit_IT+0x6a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a13      	ldr	r2, [pc, #76]	@ (8003c08 <HAL_UART_Transmit_IT+0xb4>)
 8003bba:	66da      	str	r2, [r3, #108]	@ 0x6c
 8003bbc:	e002      	b.n	8003bc4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a12      	ldr	r2, [pc, #72]	@ (8003c0c <HAL_UART_Transmit_IT+0xb8>)
 8003bc2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	e853 3f00 	ldrex	r3, [r3]
 8003bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	623b      	str	r3, [r7, #32]
 8003be4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be6:	69f9      	ldr	r1, [r7, #28]
 8003be8:	6a3a      	ldr	r2, [r7, #32]
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1e6      	bne.n	8003bc4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	372c      	adds	r7, #44	@ 0x2c
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	08004e53 	.word	0x08004e53
 8003c0c:	08004d9d 	.word	0x08004d9d

08003c10 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08a      	sub	sp, #40	@ 0x28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c24:	2b20      	cmp	r3, #32
 8003c26:	d132      	bne.n	8003c8e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_UART_Receive_IT+0x24>
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d101      	bne.n	8003c38 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e02b      	b.n	8003c90 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d018      	beq.n	8003c7e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	613b      	str	r3, [r7, #16]
   return(result);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	69f9      	ldr	r1, [r7, #28]
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e6      	bne.n	8003c4c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c7e:	88fb      	ldrh	r3, [r7, #6]
 8003c80:	461a      	mov	r2, r3
 8003c82:	68b9      	ldr	r1, [r7, #8]
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f000 ff49 	bl	8004b1c <UART_Start_Receive_IT>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	e000      	b.n	8003c90 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003c8e:	2302      	movs	r3, #2
  }
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3728      	adds	r7, #40	@ 0x28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b0ba      	sub	sp, #232	@ 0xe8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003cbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003cc2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d115      	bne.n	8003d00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00f      	beq.n	8003d00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d009      	beq.n	8003d00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 82ac 	beq.w	800424e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
      }
      return;
 8003cfe:	e2a6      	b.n	800424e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8117 	beq.w	8003f38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003d16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003d1a:	4b85      	ldr	r3, [pc, #532]	@ (8003f30 <HAL_UART_IRQHandler+0x298>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 810a 	beq.w	8003f38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d011      	beq.n	8003d54 <HAL_UART_IRQHandler+0xbc>
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2201      	movs	r2, #1
 8003d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d4a:	f043 0201 	orr.w	r2, r3, #1
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d011      	beq.n	8003d84 <HAL_UART_IRQHandler+0xec>
 8003d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2202      	movs	r2, #2
 8003d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7a:	f043 0204 	orr.w	r2, r3, #4
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d011      	beq.n	8003db4 <HAL_UART_IRQHandler+0x11c>
 8003d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2204      	movs	r2, #4
 8003da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003daa:	f043 0202 	orr.w	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d017      	beq.n	8003df0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	f003 0320 	and.w	r3, r3, #32
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d105      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dd0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2208      	movs	r2, #8
 8003dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003de6:	f043 0208 	orr.w	r2, r3, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d012      	beq.n	8003e22 <HAL_UART_IRQHandler+0x18a>
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8212 	beq.w	8004252 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00d      	beq.n	8003e56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3e:	f003 0320 	and.w	r3, r3, #32
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d007      	beq.n	8003e56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e6a:	2b40      	cmp	r3, #64	@ 0x40
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d04f      	beq.n	8003f1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 ff14 	bl	8004ca8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8a:	2b40      	cmp	r3, #64	@ 0x40
 8003e8c:	d141      	bne.n	8003f12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3308      	adds	r3, #8
 8003e94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e9c:	e853 3f00 	ldrex	r3, [r3]
 8003ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3308      	adds	r3, #8
 8003eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003eba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1d9      	bne.n	8003e8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d013      	beq.n	8003f0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	4a13      	ldr	r2, [pc, #76]	@ (8003f34 <HAL_UART_IRQHandler+0x29c>)
 8003ee8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fb58 	bl	80025a4 <HAL_DMA_Abort_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d017      	beq.n	8003f2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	e00f      	b.n	8003f2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f9b6 	bl	800427c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	e00b      	b.n	8003f2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f9b2 	bl	800427c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	e007      	b.n	8003f2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f9ae 	bl	800427c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003f28:	e193      	b.n	8004252 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2a:	bf00      	nop
    return;
 8003f2c:	e191      	b.n	8004252 <HAL_UART_IRQHandler+0x5ba>
 8003f2e:	bf00      	nop
 8003f30:	04000120 	.word	0x04000120
 8003f34:	08004d71 	.word	0x08004d71

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	f040 814c 	bne.w	80041da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8145 	beq.w	80041da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f54:	f003 0310 	and.w	r3, r3, #16
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 813e 	beq.w	80041da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2210      	movs	r2, #16
 8003f64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f70:	2b40      	cmp	r3, #64	@ 0x40
 8003f72:	f040 80b6 	bne.w	80040e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 8165 	beq.w	8004256 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f96:	429a      	cmp	r2, r3
 8003f98:	f080 815d 	bcs.w	8004256 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fa2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb0:	f000 8086 	beq.w	80040c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fc0:	e853 3f00 	ldrex	r3, [r3]
 8003fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fe2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1da      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800400e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004022:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004026:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004028:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800402a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800402e:	e841 2300 	strex	r3, r2, [r1]
 8004032:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1e1      	bne.n	8003ffe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800404a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800404c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3308      	adds	r3, #8
 800405a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800405e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004060:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004064:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800406c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e3      	bne.n	800403a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800408e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004090:	f023 0310 	bic.w	r3, r3, #16
 8004094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80040b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1e4      	bne.n	8004080 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fa02 	bl	80024c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8d8 	bl	8004290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040e0:	e0b9      	b.n	8004256 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80ab 	beq.w	800425a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80a6 	beq.w	800425a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800411c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800411e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004122:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004130:	647b      	str	r3, [r7, #68]	@ 0x44
 8004132:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004136:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800413e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e4      	bne.n	800410e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	3308      	adds	r3, #8
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	e853 3f00 	ldrex	r3, [r3]
 8004152:	623b      	str	r3, [r7, #32]
   return(result);
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004168:	633a      	str	r2, [r7, #48]	@ 0x30
 800416a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800416e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004170:	e841 2300 	strex	r3, r2, [r1]
 8004174:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1e3      	bne.n	8004144 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2220      	movs	r2, #32
 8004180:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	60fb      	str	r3, [r7, #12]
   return(result);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f023 0310 	bic.w	r3, r3, #16
 80041a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	69b9      	ldr	r1, [r7, #24]
 80041b8:	69fa      	ldr	r2, [r7, #28]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	617b      	str	r3, [r7, #20]
   return(result);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e4      	bne.n	8004190 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041d0:	4619      	mov	r1, r3
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f85c 	bl	8004290 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041d8:	e03f      	b.n	800425a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00e      	beq.n	8004204 <HAL_UART_IRQHandler+0x56c>
 80041e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80041fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f853 	bl	80042a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004202:	e02d      	b.n	8004260 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01c      	beq.n	800425e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	4798      	blx	r3
    }
    return;
 800422c:	e017      	b.n	800425e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800422e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d012      	beq.n	8004260 <HAL_UART_IRQHandler+0x5c8>
 800423a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800423e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fe63 	bl	8004f12 <UART_EndTransmit_IT>
    return;
 800424c:	e008      	b.n	8004260 <HAL_UART_IRQHandler+0x5c8>
      return;
 800424e:	bf00      	nop
 8004250:	e006      	b.n	8004260 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004252:	bf00      	nop
 8004254:	e004      	b.n	8004260 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004256:	bf00      	nop
 8004258:	e002      	b.n	8004260 <HAL_UART_IRQHandler+0x5c8>
      return;
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <HAL_UART_IRQHandler+0x5c8>
    return;
 800425e:	bf00      	nop
  }

}
 8004260:	37e8      	adds	r7, #232	@ 0xe8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop

08004268 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	460b      	mov	r3, r1
 800429a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042c8:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042d0:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4313      	orrs	r3, r2
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	4313      	orrs	r3, r2
 8004306:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4ba6      	ldr	r3, [pc, #664]	@ (80045a8 <UART_SetConfig+0x2c4>)
 8004310:	4013      	ands	r3, r2
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6812      	ldr	r2, [r2, #0]
 8004316:	6979      	ldr	r1, [r7, #20]
 8004318:	430b      	orrs	r3, r1
 800431a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68da      	ldr	r2, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	430a      	orrs	r2, r1
 8004354:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a94      	ldr	r2, [pc, #592]	@ (80045ac <UART_SetConfig+0x2c8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d120      	bne.n	80043a2 <UART_SetConfig+0xbe>
 8004360:	4b93      	ldr	r3, [pc, #588]	@ (80045b0 <UART_SetConfig+0x2cc>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004366:	f003 0303 	and.w	r3, r3, #3
 800436a:	2b03      	cmp	r3, #3
 800436c:	d816      	bhi.n	800439c <UART_SetConfig+0xb8>
 800436e:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <UART_SetConfig+0x90>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	08004391 	.word	0x08004391
 800437c:	0800438b 	.word	0x0800438b
 8004380:	08004397 	.word	0x08004397
 8004384:	2301      	movs	r3, #1
 8004386:	77fb      	strb	r3, [r7, #31]
 8004388:	e150      	b.n	800462c <UART_SetConfig+0x348>
 800438a:	2302      	movs	r3, #2
 800438c:	77fb      	strb	r3, [r7, #31]
 800438e:	e14d      	b.n	800462c <UART_SetConfig+0x348>
 8004390:	2304      	movs	r3, #4
 8004392:	77fb      	strb	r3, [r7, #31]
 8004394:	e14a      	b.n	800462c <UART_SetConfig+0x348>
 8004396:	2308      	movs	r3, #8
 8004398:	77fb      	strb	r3, [r7, #31]
 800439a:	e147      	b.n	800462c <UART_SetConfig+0x348>
 800439c:	2310      	movs	r3, #16
 800439e:	77fb      	strb	r3, [r7, #31]
 80043a0:	e144      	b.n	800462c <UART_SetConfig+0x348>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a83      	ldr	r2, [pc, #524]	@ (80045b4 <UART_SetConfig+0x2d0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d132      	bne.n	8004412 <UART_SetConfig+0x12e>
 80043ac:	4b80      	ldr	r3, [pc, #512]	@ (80045b0 <UART_SetConfig+0x2cc>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d828      	bhi.n	800440c <UART_SetConfig+0x128>
 80043ba:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <UART_SetConfig+0xdc>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	08004401 	.word	0x08004401
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	080043fb 	.word	0x080043fb
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	0800440d 	.word	0x0800440d
 80043f0:	08004407 	.word	0x08004407
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
 80043f8:	e118      	b.n	800462c <UART_SetConfig+0x348>
 80043fa:	2302      	movs	r3, #2
 80043fc:	77fb      	strb	r3, [r7, #31]
 80043fe:	e115      	b.n	800462c <UART_SetConfig+0x348>
 8004400:	2304      	movs	r3, #4
 8004402:	77fb      	strb	r3, [r7, #31]
 8004404:	e112      	b.n	800462c <UART_SetConfig+0x348>
 8004406:	2308      	movs	r3, #8
 8004408:	77fb      	strb	r3, [r7, #31]
 800440a:	e10f      	b.n	800462c <UART_SetConfig+0x348>
 800440c:	2310      	movs	r3, #16
 800440e:	77fb      	strb	r3, [r7, #31]
 8004410:	e10c      	b.n	800462c <UART_SetConfig+0x348>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a68      	ldr	r2, [pc, #416]	@ (80045b8 <UART_SetConfig+0x2d4>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d120      	bne.n	800445e <UART_SetConfig+0x17a>
 800441c:	4b64      	ldr	r3, [pc, #400]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004422:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004426:	2b30      	cmp	r3, #48	@ 0x30
 8004428:	d013      	beq.n	8004452 <UART_SetConfig+0x16e>
 800442a:	2b30      	cmp	r3, #48	@ 0x30
 800442c:	d814      	bhi.n	8004458 <UART_SetConfig+0x174>
 800442e:	2b20      	cmp	r3, #32
 8004430:	d009      	beq.n	8004446 <UART_SetConfig+0x162>
 8004432:	2b20      	cmp	r3, #32
 8004434:	d810      	bhi.n	8004458 <UART_SetConfig+0x174>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <UART_SetConfig+0x15c>
 800443a:	2b10      	cmp	r3, #16
 800443c:	d006      	beq.n	800444c <UART_SetConfig+0x168>
 800443e:	e00b      	b.n	8004458 <UART_SetConfig+0x174>
 8004440:	2300      	movs	r3, #0
 8004442:	77fb      	strb	r3, [r7, #31]
 8004444:	e0f2      	b.n	800462c <UART_SetConfig+0x348>
 8004446:	2302      	movs	r3, #2
 8004448:	77fb      	strb	r3, [r7, #31]
 800444a:	e0ef      	b.n	800462c <UART_SetConfig+0x348>
 800444c:	2304      	movs	r3, #4
 800444e:	77fb      	strb	r3, [r7, #31]
 8004450:	e0ec      	b.n	800462c <UART_SetConfig+0x348>
 8004452:	2308      	movs	r3, #8
 8004454:	77fb      	strb	r3, [r7, #31]
 8004456:	e0e9      	b.n	800462c <UART_SetConfig+0x348>
 8004458:	2310      	movs	r3, #16
 800445a:	77fb      	strb	r3, [r7, #31]
 800445c:	e0e6      	b.n	800462c <UART_SetConfig+0x348>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a56      	ldr	r2, [pc, #344]	@ (80045bc <UART_SetConfig+0x2d8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d120      	bne.n	80044aa <UART_SetConfig+0x1c6>
 8004468:	4b51      	ldr	r3, [pc, #324]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800446a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800446e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004472:	2bc0      	cmp	r3, #192	@ 0xc0
 8004474:	d013      	beq.n	800449e <UART_SetConfig+0x1ba>
 8004476:	2bc0      	cmp	r3, #192	@ 0xc0
 8004478:	d814      	bhi.n	80044a4 <UART_SetConfig+0x1c0>
 800447a:	2b80      	cmp	r3, #128	@ 0x80
 800447c:	d009      	beq.n	8004492 <UART_SetConfig+0x1ae>
 800447e:	2b80      	cmp	r3, #128	@ 0x80
 8004480:	d810      	bhi.n	80044a4 <UART_SetConfig+0x1c0>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <UART_SetConfig+0x1a8>
 8004486:	2b40      	cmp	r3, #64	@ 0x40
 8004488:	d006      	beq.n	8004498 <UART_SetConfig+0x1b4>
 800448a:	e00b      	b.n	80044a4 <UART_SetConfig+0x1c0>
 800448c:	2300      	movs	r3, #0
 800448e:	77fb      	strb	r3, [r7, #31]
 8004490:	e0cc      	b.n	800462c <UART_SetConfig+0x348>
 8004492:	2302      	movs	r3, #2
 8004494:	77fb      	strb	r3, [r7, #31]
 8004496:	e0c9      	b.n	800462c <UART_SetConfig+0x348>
 8004498:	2304      	movs	r3, #4
 800449a:	77fb      	strb	r3, [r7, #31]
 800449c:	e0c6      	b.n	800462c <UART_SetConfig+0x348>
 800449e:	2308      	movs	r3, #8
 80044a0:	77fb      	strb	r3, [r7, #31]
 80044a2:	e0c3      	b.n	800462c <UART_SetConfig+0x348>
 80044a4:	2310      	movs	r3, #16
 80044a6:	77fb      	strb	r3, [r7, #31]
 80044a8:	e0c0      	b.n	800462c <UART_SetConfig+0x348>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a44      	ldr	r2, [pc, #272]	@ (80045c0 <UART_SetConfig+0x2dc>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d125      	bne.n	8004500 <UART_SetConfig+0x21c>
 80044b4:	4b3e      	ldr	r3, [pc, #248]	@ (80045b0 <UART_SetConfig+0x2cc>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c2:	d017      	beq.n	80044f4 <UART_SetConfig+0x210>
 80044c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c8:	d817      	bhi.n	80044fa <UART_SetConfig+0x216>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d00b      	beq.n	80044e8 <UART_SetConfig+0x204>
 80044d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044d4:	d811      	bhi.n	80044fa <UART_SetConfig+0x216>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <UART_SetConfig+0x1fe>
 80044da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044de:	d006      	beq.n	80044ee <UART_SetConfig+0x20a>
 80044e0:	e00b      	b.n	80044fa <UART_SetConfig+0x216>
 80044e2:	2300      	movs	r3, #0
 80044e4:	77fb      	strb	r3, [r7, #31]
 80044e6:	e0a1      	b.n	800462c <UART_SetConfig+0x348>
 80044e8:	2302      	movs	r3, #2
 80044ea:	77fb      	strb	r3, [r7, #31]
 80044ec:	e09e      	b.n	800462c <UART_SetConfig+0x348>
 80044ee:	2304      	movs	r3, #4
 80044f0:	77fb      	strb	r3, [r7, #31]
 80044f2:	e09b      	b.n	800462c <UART_SetConfig+0x348>
 80044f4:	2308      	movs	r3, #8
 80044f6:	77fb      	strb	r3, [r7, #31]
 80044f8:	e098      	b.n	800462c <UART_SetConfig+0x348>
 80044fa:	2310      	movs	r3, #16
 80044fc:	77fb      	strb	r3, [r7, #31]
 80044fe:	e095      	b.n	800462c <UART_SetConfig+0x348>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2f      	ldr	r2, [pc, #188]	@ (80045c4 <UART_SetConfig+0x2e0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d125      	bne.n	8004556 <UART_SetConfig+0x272>
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <UART_SetConfig+0x2cc>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004510:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004518:	d017      	beq.n	800454a <UART_SetConfig+0x266>
 800451a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800451e:	d817      	bhi.n	8004550 <UART_SetConfig+0x26c>
 8004520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004524:	d00b      	beq.n	800453e <UART_SetConfig+0x25a>
 8004526:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452a:	d811      	bhi.n	8004550 <UART_SetConfig+0x26c>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <UART_SetConfig+0x254>
 8004530:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004534:	d006      	beq.n	8004544 <UART_SetConfig+0x260>
 8004536:	e00b      	b.n	8004550 <UART_SetConfig+0x26c>
 8004538:	2301      	movs	r3, #1
 800453a:	77fb      	strb	r3, [r7, #31]
 800453c:	e076      	b.n	800462c <UART_SetConfig+0x348>
 800453e:	2302      	movs	r3, #2
 8004540:	77fb      	strb	r3, [r7, #31]
 8004542:	e073      	b.n	800462c <UART_SetConfig+0x348>
 8004544:	2304      	movs	r3, #4
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e070      	b.n	800462c <UART_SetConfig+0x348>
 800454a:	2308      	movs	r3, #8
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e06d      	b.n	800462c <UART_SetConfig+0x348>
 8004550:	2310      	movs	r3, #16
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e06a      	b.n	800462c <UART_SetConfig+0x348>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a1b      	ldr	r2, [pc, #108]	@ (80045c8 <UART_SetConfig+0x2e4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d138      	bne.n	80045d2 <UART_SetConfig+0x2ee>
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <UART_SetConfig+0x2cc>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004566:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800456a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800456e:	d017      	beq.n	80045a0 <UART_SetConfig+0x2bc>
 8004570:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004574:	d82a      	bhi.n	80045cc <UART_SetConfig+0x2e8>
 8004576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800457a:	d00b      	beq.n	8004594 <UART_SetConfig+0x2b0>
 800457c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004580:	d824      	bhi.n	80045cc <UART_SetConfig+0x2e8>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <UART_SetConfig+0x2aa>
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458a:	d006      	beq.n	800459a <UART_SetConfig+0x2b6>
 800458c:	e01e      	b.n	80045cc <UART_SetConfig+0x2e8>
 800458e:	2300      	movs	r3, #0
 8004590:	77fb      	strb	r3, [r7, #31]
 8004592:	e04b      	b.n	800462c <UART_SetConfig+0x348>
 8004594:	2302      	movs	r3, #2
 8004596:	77fb      	strb	r3, [r7, #31]
 8004598:	e048      	b.n	800462c <UART_SetConfig+0x348>
 800459a:	2304      	movs	r3, #4
 800459c:	77fb      	strb	r3, [r7, #31]
 800459e:	e045      	b.n	800462c <UART_SetConfig+0x348>
 80045a0:	2308      	movs	r3, #8
 80045a2:	77fb      	strb	r3, [r7, #31]
 80045a4:	e042      	b.n	800462c <UART_SetConfig+0x348>
 80045a6:	bf00      	nop
 80045a8:	efff69f3 	.word	0xefff69f3
 80045ac:	40011000 	.word	0x40011000
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40004400 	.word	0x40004400
 80045b8:	40004800 	.word	0x40004800
 80045bc:	40004c00 	.word	0x40004c00
 80045c0:	40005000 	.word	0x40005000
 80045c4:	40011400 	.word	0x40011400
 80045c8:	40007800 	.word	0x40007800
 80045cc:	2310      	movs	r3, #16
 80045ce:	77fb      	strb	r3, [r7, #31]
 80045d0:	e02c      	b.n	800462c <UART_SetConfig+0x348>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a72      	ldr	r2, [pc, #456]	@ (80047a0 <UART_SetConfig+0x4bc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d125      	bne.n	8004628 <UART_SetConfig+0x344>
 80045dc:	4b71      	ldr	r3, [pc, #452]	@ (80047a4 <UART_SetConfig+0x4c0>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80045e6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045ea:	d017      	beq.n	800461c <UART_SetConfig+0x338>
 80045ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045f0:	d817      	bhi.n	8004622 <UART_SetConfig+0x33e>
 80045f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045f6:	d00b      	beq.n	8004610 <UART_SetConfig+0x32c>
 80045f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045fc:	d811      	bhi.n	8004622 <UART_SetConfig+0x33e>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <UART_SetConfig+0x326>
 8004602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004606:	d006      	beq.n	8004616 <UART_SetConfig+0x332>
 8004608:	e00b      	b.n	8004622 <UART_SetConfig+0x33e>
 800460a:	2300      	movs	r3, #0
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e00d      	b.n	800462c <UART_SetConfig+0x348>
 8004610:	2302      	movs	r3, #2
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e00a      	b.n	800462c <UART_SetConfig+0x348>
 8004616:	2304      	movs	r3, #4
 8004618:	77fb      	strb	r3, [r7, #31]
 800461a:	e007      	b.n	800462c <UART_SetConfig+0x348>
 800461c:	2308      	movs	r3, #8
 800461e:	77fb      	strb	r3, [r7, #31]
 8004620:	e004      	b.n	800462c <UART_SetConfig+0x348>
 8004622:	2310      	movs	r3, #16
 8004624:	77fb      	strb	r3, [r7, #31]
 8004626:	e001      	b.n	800462c <UART_SetConfig+0x348>
 8004628:	2310      	movs	r3, #16
 800462a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004634:	d15b      	bne.n	80046ee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004636:	7ffb      	ldrb	r3, [r7, #31]
 8004638:	2b08      	cmp	r3, #8
 800463a:	d828      	bhi.n	800468e <UART_SetConfig+0x3aa>
 800463c:	a201      	add	r2, pc, #4	@ (adr r2, 8004644 <UART_SetConfig+0x360>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004669 	.word	0x08004669
 8004648:	08004671 	.word	0x08004671
 800464c:	08004679 	.word	0x08004679
 8004650:	0800468f 	.word	0x0800468f
 8004654:	0800467f 	.word	0x0800467f
 8004658:	0800468f 	.word	0x0800468f
 800465c:	0800468f 	.word	0x0800468f
 8004660:	0800468f 	.word	0x0800468f
 8004664:	08004687 	.word	0x08004687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004668:	f7fe fdd6 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 800466c:	61b8      	str	r0, [r7, #24]
        break;
 800466e:	e013      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004670:	f7fe fde6 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 8004674:	61b8      	str	r0, [r7, #24]
        break;
 8004676:	e00f      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004678:	4b4b      	ldr	r3, [pc, #300]	@ (80047a8 <UART_SetConfig+0x4c4>)
 800467a:	61bb      	str	r3, [r7, #24]
        break;
 800467c:	e00c      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467e:	f7fe fcf9 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 8004682:	61b8      	str	r0, [r7, #24]
        break;
 8004684:	e008      	b.n	8004698 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800468a:	61bb      	str	r3, [r7, #24]
        break;
 800468c:	e004      	b.n	8004698 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	77bb      	strb	r3, [r7, #30]
        break;
 8004696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d074      	beq.n	8004788 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	005a      	lsls	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	441a      	add	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d916      	bls.n	80046e8 <UART_SetConfig+0x404>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c0:	d212      	bcs.n	80046e8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	f023 030f 	bic.w	r3, r3, #15
 80046ca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	4313      	orrs	r3, r2
 80046dc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	89fa      	ldrh	r2, [r7, #14]
 80046e4:	60da      	str	r2, [r3, #12]
 80046e6:	e04f      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77bb      	strb	r3, [r7, #30]
 80046ec:	e04c      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ee:	7ffb      	ldrb	r3, [r7, #31]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d828      	bhi.n	8004746 <UART_SetConfig+0x462>
 80046f4:	a201      	add	r2, pc, #4	@ (adr r2, 80046fc <UART_SetConfig+0x418>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	08004747 	.word	0x08004747
 800470c:	08004737 	.word	0x08004737
 8004710:	08004747 	.word	0x08004747
 8004714:	08004747 	.word	0x08004747
 8004718:	08004747 	.word	0x08004747
 800471c:	0800473f 	.word	0x0800473f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe fd7a 	bl	8003218 <HAL_RCC_GetPCLK1Freq>
 8004724:	61b8      	str	r0, [r7, #24]
        break;
 8004726:	e013      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004728:	f7fe fd8a 	bl	8003240 <HAL_RCC_GetPCLK2Freq>
 800472c:	61b8      	str	r0, [r7, #24]
        break;
 800472e:	e00f      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004730:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <UART_SetConfig+0x4c4>)
 8004732:	61bb      	str	r3, [r7, #24]
        break;
 8004734:	e00c      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004736:	f7fe fc9d 	bl	8003074 <HAL_RCC_GetSysClockFreq>
 800473a:	61b8      	str	r0, [r7, #24]
        break;
 800473c:	e008      	b.n	8004750 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004742:	61bb      	str	r3, [r7, #24]
        break;
 8004744:	e004      	b.n	8004750 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77bb      	strb	r3, [r7, #30]
        break;
 800474e:	bf00      	nop
    }

    if (pclk != 0U)
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	085a      	lsrs	r2, r3, #1
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	441a      	add	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b0f      	cmp	r3, #15
 800476e:	d909      	bls.n	8004784 <UART_SetConfig+0x4a0>
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004776:	d205      	bcs.n	8004784 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	b29a      	uxth	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	e001      	b.n	8004788 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004794:	7fbb      	ldrb	r3, [r7, #30]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40007c00 	.word	0x40007c00
 80047a4:	40023800 	.word	0x40023800
 80047a8:	00f42400 	.word	0x00f42400

080047ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01a      	beq.n	80048c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048aa:	d10a      	bne.n	80048c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b098      	sub	sp, #96	@ 0x60
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004900:	f7fc fe82 	bl	8001608 <HAL_GetTick>
 8004904:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d12e      	bne.n	8004972 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004914:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800491c:	2200      	movs	r2, #0
 800491e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f88c 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d021      	beq.n	8004972 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800493c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800493e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004942:	653b      	str	r3, [r7, #80]	@ 0x50
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	461a      	mov	r2, r3
 800494a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
 800494e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004952:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800495a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e6      	bne.n	800492e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e062      	b.n	8004a38 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b04      	cmp	r3, #4
 800497e:	d149      	bne.n	8004a14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004980:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004988:	2200      	movs	r2, #0
 800498a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f856 	bl	8004a40 <UART_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d03c      	beq.n	8004a14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	623b      	str	r3, [r7, #32]
   return(result);
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e6      	bne.n	800499a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3308      	adds	r3, #8
 80049d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	60fb      	str	r3, [r7, #12]
   return(result);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049ec:	61fa      	str	r2, [r7, #28]
 80049ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	69b9      	ldr	r1, [r7, #24]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	617b      	str	r3, [r7, #20]
   return(result);
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e5      	bne.n	80049cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e011      	b.n	8004a38 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3758      	adds	r7, #88	@ 0x58
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	e04f      	b.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a58:	d04b      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fc fdd5 	bl	8001608 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e04e      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d037      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b80      	cmp	r3, #128	@ 0x80
 8004a86:	d034      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b40      	cmp	r3, #64	@ 0x40
 8004a8c:	d031      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d110      	bne.n	8004abe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f8ff 	bl	8004ca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2208      	movs	r2, #8
 8004aae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e029      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004acc:	d111      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ad6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f8e5 	bl	8004ca8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e00f      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4013      	ands	r3, r2
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	bf0c      	ite	eq
 8004b02:	2301      	moveq	r3, #1
 8004b04:	2300      	movne	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	461a      	mov	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d0a0      	beq.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b097      	sub	sp, #92	@ 0x5c
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	4613      	mov	r3, r2
 8004b28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	88fa      	ldrh	r2, [r7, #6]
 8004b3c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	d10e      	bne.n	8004b6e <UART_Start_Receive_IT+0x52>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d105      	bne.n	8004b64 <UART_Start_Receive_IT+0x48>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b62:	e02d      	b.n	8004bc0 <UART_Start_Receive_IT+0xa4>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	22ff      	movs	r2, #255	@ 0xff
 8004b68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b6c:	e028      	b.n	8004bc0 <UART_Start_Receive_IT+0xa4>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10d      	bne.n	8004b92 <UART_Start_Receive_IT+0x76>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d104      	bne.n	8004b88 <UART_Start_Receive_IT+0x6c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	22ff      	movs	r2, #255	@ 0xff
 8004b82:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b86:	e01b      	b.n	8004bc0 <UART_Start_Receive_IT+0xa4>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	227f      	movs	r2, #127	@ 0x7f
 8004b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b90:	e016      	b.n	8004bc0 <UART_Start_Receive_IT+0xa4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b9a:	d10d      	bne.n	8004bb8 <UART_Start_Receive_IT+0x9c>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d104      	bne.n	8004bae <UART_Start_Receive_IT+0x92>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	227f      	movs	r2, #127	@ 0x7f
 8004ba8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bac:	e008      	b.n	8004bc0 <UART_Start_Receive_IT+0xa4>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	223f      	movs	r2, #63	@ 0x3f
 8004bb2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bb6:	e003      	b.n	8004bc0 <UART_Start_Receive_IT+0xa4>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2222      	movs	r2, #34	@ 0x22
 8004bcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3308      	adds	r3, #8
 8004bee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004bf0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004bf2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e5      	bne.n	8004bd0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c0c:	d107      	bne.n	8004c1e <UART_Start_Receive_IT+0x102>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d103      	bne.n	8004c1e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a21      	ldr	r2, [pc, #132]	@ (8004ca0 <UART_Start_Receive_IT+0x184>)
 8004c1a:	669a      	str	r2, [r3, #104]	@ 0x68
 8004c1c:	e002      	b.n	8004c24 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4a20      	ldr	r2, [pc, #128]	@ (8004ca4 <UART_Start_Receive_IT+0x188>)
 8004c22:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d019      	beq.n	8004c60 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c4c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e6      	bne.n	8004c2c <UART_Start_Receive_IT+0x110>
 8004c5e:	e018      	b.n	8004c92 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f043 0320 	orr.w	r3, r3, #32
 8004c74:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	69f9      	ldr	r1, [r7, #28]
 8004c84:	6a3a      	ldr	r2, [r7, #32]
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e6      	bne.n	8004c60 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	375c      	adds	r7, #92	@ 0x5c
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	0800510f 	.word	0x0800510f
 8004ca4:	08004f67 	.word	0x08004f67

08004ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b095      	sub	sp, #84	@ 0x54
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cce:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e6      	bne.n	8004cb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	e853 3f00 	ldrex	r3, [r3]
 8004cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e5      	bne.n	8004ce2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d118      	bne.n	8004d50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	e853 3f00 	ldrex	r3, [r3]
 8004d2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f023 0310 	bic.w	r3, r3, #16
 8004d32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d40:	6979      	ldr	r1, [r7, #20]
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	e841 2300 	strex	r3, r2, [r1]
 8004d48:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1e6      	bne.n	8004d1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d64:	bf00      	nop
 8004d66:	3754      	adds	r7, #84	@ 0x54
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff fa74 	bl	800427c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b08f      	sub	sp, #60	@ 0x3c
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004da8:	2b21      	cmp	r3, #33	@ 0x21
 8004daa:	d14c      	bne.n	8004e46 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d132      	bne.n	8004e1e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dd8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ddc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e6      	bne.n	8004db8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	461a      	mov	r2, r3
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6979      	ldr	r1, [r7, #20]
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	613b      	str	r3, [r7, #16]
   return(result);
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e6      	bne.n	8004dea <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004e1c:	e013      	b.n	8004e46 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004e46:	bf00      	nop
 8004e48:	373c      	adds	r7, #60	@ 0x3c
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b091      	sub	sp, #68	@ 0x44
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5e:	2b21      	cmp	r3, #33	@ 0x21
 8004e60:	d151      	bne.n	8004f06 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d132      	bne.n	8004ed4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e76:	e853 3f00 	ldrex	r3, [r3]
 8004e7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e6      	bne.n	8004e6e <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	69b9      	ldr	r1, [r7, #24]
 8004ec4:	69fa      	ldr	r2, [r7, #28]
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	617b      	str	r3, [r7, #20]
   return(result);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e6      	bne.n	8004ea0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004ed2:	e018      	b.n	8004f06 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ee8:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	1c9a      	adds	r2, r3, #2
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8004f06:	bf00      	nop
 8004f08:	3744      	adds	r7, #68	@ 0x44
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b088      	sub	sp, #32
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6979      	ldr	r1, [r7, #20]
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	613b      	str	r3, [r7, #16]
   return(result);
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff f985 	bl	8004268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f5e:	bf00      	nop
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b09c      	sub	sp, #112	@ 0x70
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f74:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f7e:	2b22      	cmp	r3, #34	@ 0x22
 8004f80:	f040 80b9 	bne.w	80050f6 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f8e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004f92:	b2d9      	uxtb	r1, r3
 8004f94:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9e:	400a      	ands	r2, r1
 8004fa0:	b2d2      	uxtb	r2, r2
 8004fa2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f040 809c 	bne.w	8005106 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fe2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004fee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ff2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ff4:	e841 2300 	strex	r3, r2, [r1]
 8004ff8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1e6      	bne.n	8004fce <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500a:	e853 3f00 	ldrex	r3, [r3]
 800500e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005012:	f023 0301 	bic.w	r3, r3, #1
 8005016:	667b      	str	r3, [r7, #100]	@ 0x64
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3308      	adds	r3, #8
 800501e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005020:	647a      	str	r2, [r7, #68]	@ 0x44
 8005022:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005028:	e841 2300 	strex	r3, r2, [r1]
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800502e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1e5      	bne.n	8005000 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d018      	beq.n	8005088 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	e853 3f00 	ldrex	r3, [r3]
 8005062:	623b      	str	r3, [r7, #32]
   return(result);
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800506a:	663b      	str	r3, [r7, #96]	@ 0x60
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	461a      	mov	r2, r3
 8005072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005074:	633b      	str	r3, [r7, #48]	@ 0x30
 8005076:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800507a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e6      	bne.n	8005056 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508c:	2b01      	cmp	r3, #1
 800508e:	d12e      	bne.n	80050ee <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0310 	bic.w	r3, r3, #16
 80050aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	69b9      	ldr	r1, [r7, #24]
 80050ba:	69fa      	ldr	r2, [r7, #28]
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	617b      	str	r3, [r7, #20]
   return(result);
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 0310 	and.w	r3, r3, #16
 80050d2:	2b10      	cmp	r3, #16
 80050d4:	d103      	bne.n	80050de <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2210      	movs	r2, #16
 80050dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff f8d2 	bl	8004290 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80050ec:	e00b      	b.n	8005106 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7fb ffbc 	bl	800106c <HAL_UART_RxCpltCallback>
}
 80050f4:	e007      	b.n	8005106 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699a      	ldr	r2, [r3, #24]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0208 	orr.w	r2, r2, #8
 8005104:	619a      	str	r2, [r3, #24]
}
 8005106:	bf00      	nop
 8005108:	3770      	adds	r7, #112	@ 0x70
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b09c      	sub	sp, #112	@ 0x70
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800511c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005126:	2b22      	cmp	r3, #34	@ 0x22
 8005128:	f040 80b9 	bne.w	800529e <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513a:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800513c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005140:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005144:	4013      	ands	r3, r2
 8005146:	b29a      	uxth	r2, r3
 8005148:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800514a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	f040 809c 	bne.w	80052ae <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800517e:	e853 3f00 	ldrex	r3, [r3]
 8005182:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005186:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800518a:	667b      	str	r3, [r7, #100]	@ 0x64
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005194:	657b      	str	r3, [r7, #84]	@ 0x54
 8005196:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005198:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800519a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800519c:	e841 2300 	strex	r3, r2, [r1]
 80051a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80051a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1e6      	bne.n	8005176 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3308      	adds	r3, #8
 80051ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b2:	e853 3f00 	ldrex	r3, [r3]
 80051b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	663b      	str	r3, [r7, #96]	@ 0x60
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80051c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e5      	bne.n	80051a8 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d018      	beq.n	8005230 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	e853 3f00 	ldrex	r3, [r3]
 800520a:	61fb      	str	r3, [r7, #28]
   return(result);
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	461a      	mov	r2, r3
 800521a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800521c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800521e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e6      	bne.n	80051fe <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005234:	2b01      	cmp	r3, #1
 8005236:	d12e      	bne.n	8005296 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	60bb      	str	r3, [r7, #8]
   return(result);
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f023 0310 	bic.w	r3, r3, #16
 8005252:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6979      	ldr	r1, [r7, #20]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	613b      	str	r3, [r7, #16]
   return(result);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e6      	bne.n	800523e <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b10      	cmp	r3, #16
 800527c:	d103      	bne.n	8005286 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2210      	movs	r2, #16
 8005284:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fe fffe 	bl	8004290 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005294:	e00b      	b.n	80052ae <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fb fee8 	bl	800106c <HAL_UART_RxCpltCallback>
}
 800529c:	e007      	b.n	80052ae <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0208 	orr.w	r2, r2, #8
 80052ac:	619a      	str	r2, [r3, #24]
}
 80052ae:	bf00      	nop
 80052b0:	3770      	adds	r7, #112	@ 0x70
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <siprintf>:
 80052b8:	b40e      	push	{r1, r2, r3}
 80052ba:	b500      	push	{lr}
 80052bc:	b09c      	sub	sp, #112	@ 0x70
 80052be:	ab1d      	add	r3, sp, #116	@ 0x74
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	9006      	str	r0, [sp, #24]
 80052c4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80052c8:	4809      	ldr	r0, [pc, #36]	@ (80052f0 <siprintf+0x38>)
 80052ca:	9107      	str	r1, [sp, #28]
 80052cc:	9104      	str	r1, [sp, #16]
 80052ce:	4909      	ldr	r1, [pc, #36]	@ (80052f4 <siprintf+0x3c>)
 80052d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052d4:	9105      	str	r1, [sp, #20]
 80052d6:	6800      	ldr	r0, [r0, #0]
 80052d8:	9301      	str	r3, [sp, #4]
 80052da:	a902      	add	r1, sp, #8
 80052dc:	f000 f994 	bl	8005608 <_svfiprintf_r>
 80052e0:	9b02      	ldr	r3, [sp, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	b01c      	add	sp, #112	@ 0x70
 80052e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052ec:	b003      	add	sp, #12
 80052ee:	4770      	bx	lr
 80052f0:	20000010 	.word	0x20000010
 80052f4:	ffff0208 	.word	0xffff0208

080052f8 <memset>:
 80052f8:	4402      	add	r2, r0
 80052fa:	4603      	mov	r3, r0
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d100      	bne.n	8005302 <memset+0xa>
 8005300:	4770      	bx	lr
 8005302:	f803 1b01 	strb.w	r1, [r3], #1
 8005306:	e7f9      	b.n	80052fc <memset+0x4>

08005308 <__errno>:
 8005308:	4b01      	ldr	r3, [pc, #4]	@ (8005310 <__errno+0x8>)
 800530a:	6818      	ldr	r0, [r3, #0]
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	20000010 	.word	0x20000010

08005314 <__libc_init_array>:
 8005314:	b570      	push	{r4, r5, r6, lr}
 8005316:	4d0d      	ldr	r5, [pc, #52]	@ (800534c <__libc_init_array+0x38>)
 8005318:	4c0d      	ldr	r4, [pc, #52]	@ (8005350 <__libc_init_array+0x3c>)
 800531a:	1b64      	subs	r4, r4, r5
 800531c:	10a4      	asrs	r4, r4, #2
 800531e:	2600      	movs	r6, #0
 8005320:	42a6      	cmp	r6, r4
 8005322:	d109      	bne.n	8005338 <__libc_init_array+0x24>
 8005324:	4d0b      	ldr	r5, [pc, #44]	@ (8005354 <__libc_init_array+0x40>)
 8005326:	4c0c      	ldr	r4, [pc, #48]	@ (8005358 <__libc_init_array+0x44>)
 8005328:	f000 fc66 	bl	8005bf8 <_init>
 800532c:	1b64      	subs	r4, r4, r5
 800532e:	10a4      	asrs	r4, r4, #2
 8005330:	2600      	movs	r6, #0
 8005332:	42a6      	cmp	r6, r4
 8005334:	d105      	bne.n	8005342 <__libc_init_array+0x2e>
 8005336:	bd70      	pop	{r4, r5, r6, pc}
 8005338:	f855 3b04 	ldr.w	r3, [r5], #4
 800533c:	4798      	blx	r3
 800533e:	3601      	adds	r6, #1
 8005340:	e7ee      	b.n	8005320 <__libc_init_array+0xc>
 8005342:	f855 3b04 	ldr.w	r3, [r5], #4
 8005346:	4798      	blx	r3
 8005348:	3601      	adds	r6, #1
 800534a:	e7f2      	b.n	8005332 <__libc_init_array+0x1e>
 800534c:	08005d34 	.word	0x08005d34
 8005350:	08005d34 	.word	0x08005d34
 8005354:	08005d34 	.word	0x08005d34
 8005358:	08005d38 	.word	0x08005d38

0800535c <__retarget_lock_acquire_recursive>:
 800535c:	4770      	bx	lr

0800535e <__retarget_lock_release_recursive>:
 800535e:	4770      	bx	lr

08005360 <_free_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	2900      	cmp	r1, #0
 8005366:	d041      	beq.n	80053ec <_free_r+0x8c>
 8005368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536c:	1f0c      	subs	r4, r1, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	18e4      	addlt	r4, r4, r3
 8005374:	f000 f8e0 	bl	8005538 <__malloc_lock>
 8005378:	4a1d      	ldr	r2, [pc, #116]	@ (80053f0 <_free_r+0x90>)
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	b933      	cbnz	r3, 800538c <_free_r+0x2c>
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	6014      	str	r4, [r2, #0]
 8005382:	4628      	mov	r0, r5
 8005384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005388:	f000 b8dc 	b.w	8005544 <__malloc_unlock>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d908      	bls.n	80053a2 <_free_r+0x42>
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	1821      	adds	r1, r4, r0
 8005394:	428b      	cmp	r3, r1
 8005396:	bf01      	itttt	eq
 8005398:	6819      	ldreq	r1, [r3, #0]
 800539a:	685b      	ldreq	r3, [r3, #4]
 800539c:	1809      	addeq	r1, r1, r0
 800539e:	6021      	streq	r1, [r4, #0]
 80053a0:	e7ed      	b.n	800537e <_free_r+0x1e>
 80053a2:	461a      	mov	r2, r3
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b10b      	cbz	r3, 80053ac <_free_r+0x4c>
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d9fa      	bls.n	80053a2 <_free_r+0x42>
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	1850      	adds	r0, r2, r1
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d10b      	bne.n	80053cc <_free_r+0x6c>
 80053b4:	6820      	ldr	r0, [r4, #0]
 80053b6:	4401      	add	r1, r0
 80053b8:	1850      	adds	r0, r2, r1
 80053ba:	4283      	cmp	r3, r0
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	d1e0      	bne.n	8005382 <_free_r+0x22>
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	6053      	str	r3, [r2, #4]
 80053c6:	4408      	add	r0, r1
 80053c8:	6010      	str	r0, [r2, #0]
 80053ca:	e7da      	b.n	8005382 <_free_r+0x22>
 80053cc:	d902      	bls.n	80053d4 <_free_r+0x74>
 80053ce:	230c      	movs	r3, #12
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	e7d6      	b.n	8005382 <_free_r+0x22>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	1821      	adds	r1, r4, r0
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf04      	itt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	6063      	str	r3, [r4, #4]
 80053e2:	bf04      	itt	eq
 80053e4:	1809      	addeq	r1, r1, r0
 80053e6:	6021      	streq	r1, [r4, #0]
 80053e8:	6054      	str	r4, [r2, #4]
 80053ea:	e7ca      	b.n	8005382 <_free_r+0x22>
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
 80053ee:	bf00      	nop
 80053f0:	200003dc 	.word	0x200003dc

080053f4 <sbrk_aligned>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4e0f      	ldr	r6, [pc, #60]	@ (8005434 <sbrk_aligned+0x40>)
 80053f8:	460c      	mov	r4, r1
 80053fa:	6831      	ldr	r1, [r6, #0]
 80053fc:	4605      	mov	r5, r0
 80053fe:	b911      	cbnz	r1, 8005406 <sbrk_aligned+0x12>
 8005400:	f000 fba6 	bl	8005b50 <_sbrk_r>
 8005404:	6030      	str	r0, [r6, #0]
 8005406:	4621      	mov	r1, r4
 8005408:	4628      	mov	r0, r5
 800540a:	f000 fba1 	bl	8005b50 <_sbrk_r>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	d103      	bne.n	800541a <sbrk_aligned+0x26>
 8005412:	f04f 34ff 	mov.w	r4, #4294967295
 8005416:	4620      	mov	r0, r4
 8005418:	bd70      	pop	{r4, r5, r6, pc}
 800541a:	1cc4      	adds	r4, r0, #3
 800541c:	f024 0403 	bic.w	r4, r4, #3
 8005420:	42a0      	cmp	r0, r4
 8005422:	d0f8      	beq.n	8005416 <sbrk_aligned+0x22>
 8005424:	1a21      	subs	r1, r4, r0
 8005426:	4628      	mov	r0, r5
 8005428:	f000 fb92 	bl	8005b50 <_sbrk_r>
 800542c:	3001      	adds	r0, #1
 800542e:	d1f2      	bne.n	8005416 <sbrk_aligned+0x22>
 8005430:	e7ef      	b.n	8005412 <sbrk_aligned+0x1e>
 8005432:	bf00      	nop
 8005434:	200003d8 	.word	0x200003d8

08005438 <_malloc_r>:
 8005438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800543c:	1ccd      	adds	r5, r1, #3
 800543e:	f025 0503 	bic.w	r5, r5, #3
 8005442:	3508      	adds	r5, #8
 8005444:	2d0c      	cmp	r5, #12
 8005446:	bf38      	it	cc
 8005448:	250c      	movcc	r5, #12
 800544a:	2d00      	cmp	r5, #0
 800544c:	4606      	mov	r6, r0
 800544e:	db01      	blt.n	8005454 <_malloc_r+0x1c>
 8005450:	42a9      	cmp	r1, r5
 8005452:	d904      	bls.n	800545e <_malloc_r+0x26>
 8005454:	230c      	movs	r3, #12
 8005456:	6033      	str	r3, [r6, #0]
 8005458:	2000      	movs	r0, #0
 800545a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800545e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005534 <_malloc_r+0xfc>
 8005462:	f000 f869 	bl	8005538 <__malloc_lock>
 8005466:	f8d8 3000 	ldr.w	r3, [r8]
 800546a:	461c      	mov	r4, r3
 800546c:	bb44      	cbnz	r4, 80054c0 <_malloc_r+0x88>
 800546e:	4629      	mov	r1, r5
 8005470:	4630      	mov	r0, r6
 8005472:	f7ff ffbf 	bl	80053f4 <sbrk_aligned>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	4604      	mov	r4, r0
 800547a:	d158      	bne.n	800552e <_malloc_r+0xf6>
 800547c:	f8d8 4000 	ldr.w	r4, [r8]
 8005480:	4627      	mov	r7, r4
 8005482:	2f00      	cmp	r7, #0
 8005484:	d143      	bne.n	800550e <_malloc_r+0xd6>
 8005486:	2c00      	cmp	r4, #0
 8005488:	d04b      	beq.n	8005522 <_malloc_r+0xea>
 800548a:	6823      	ldr	r3, [r4, #0]
 800548c:	4639      	mov	r1, r7
 800548e:	4630      	mov	r0, r6
 8005490:	eb04 0903 	add.w	r9, r4, r3
 8005494:	f000 fb5c 	bl	8005b50 <_sbrk_r>
 8005498:	4581      	cmp	r9, r0
 800549a:	d142      	bne.n	8005522 <_malloc_r+0xea>
 800549c:	6821      	ldr	r1, [r4, #0]
 800549e:	1a6d      	subs	r5, r5, r1
 80054a0:	4629      	mov	r1, r5
 80054a2:	4630      	mov	r0, r6
 80054a4:	f7ff ffa6 	bl	80053f4 <sbrk_aligned>
 80054a8:	3001      	adds	r0, #1
 80054aa:	d03a      	beq.n	8005522 <_malloc_r+0xea>
 80054ac:	6823      	ldr	r3, [r4, #0]
 80054ae:	442b      	add	r3, r5
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	f8d8 3000 	ldr.w	r3, [r8]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	bb62      	cbnz	r2, 8005514 <_malloc_r+0xdc>
 80054ba:	f8c8 7000 	str.w	r7, [r8]
 80054be:	e00f      	b.n	80054e0 <_malloc_r+0xa8>
 80054c0:	6822      	ldr	r2, [r4, #0]
 80054c2:	1b52      	subs	r2, r2, r5
 80054c4:	d420      	bmi.n	8005508 <_malloc_r+0xd0>
 80054c6:	2a0b      	cmp	r2, #11
 80054c8:	d917      	bls.n	80054fa <_malloc_r+0xc2>
 80054ca:	1961      	adds	r1, r4, r5
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	6025      	str	r5, [r4, #0]
 80054d0:	bf18      	it	ne
 80054d2:	6059      	strne	r1, [r3, #4]
 80054d4:	6863      	ldr	r3, [r4, #4]
 80054d6:	bf08      	it	eq
 80054d8:	f8c8 1000 	streq.w	r1, [r8]
 80054dc:	5162      	str	r2, [r4, r5]
 80054de:	604b      	str	r3, [r1, #4]
 80054e0:	4630      	mov	r0, r6
 80054e2:	f000 f82f 	bl	8005544 <__malloc_unlock>
 80054e6:	f104 000b 	add.w	r0, r4, #11
 80054ea:	1d23      	adds	r3, r4, #4
 80054ec:	f020 0007 	bic.w	r0, r0, #7
 80054f0:	1ac2      	subs	r2, r0, r3
 80054f2:	bf1c      	itt	ne
 80054f4:	1a1b      	subne	r3, r3, r0
 80054f6:	50a3      	strne	r3, [r4, r2]
 80054f8:	e7af      	b.n	800545a <_malloc_r+0x22>
 80054fa:	6862      	ldr	r2, [r4, #4]
 80054fc:	42a3      	cmp	r3, r4
 80054fe:	bf0c      	ite	eq
 8005500:	f8c8 2000 	streq.w	r2, [r8]
 8005504:	605a      	strne	r2, [r3, #4]
 8005506:	e7eb      	b.n	80054e0 <_malloc_r+0xa8>
 8005508:	4623      	mov	r3, r4
 800550a:	6864      	ldr	r4, [r4, #4]
 800550c:	e7ae      	b.n	800546c <_malloc_r+0x34>
 800550e:	463c      	mov	r4, r7
 8005510:	687f      	ldr	r7, [r7, #4]
 8005512:	e7b6      	b.n	8005482 <_malloc_r+0x4a>
 8005514:	461a      	mov	r2, r3
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	42a3      	cmp	r3, r4
 800551a:	d1fb      	bne.n	8005514 <_malloc_r+0xdc>
 800551c:	2300      	movs	r3, #0
 800551e:	6053      	str	r3, [r2, #4]
 8005520:	e7de      	b.n	80054e0 <_malloc_r+0xa8>
 8005522:	230c      	movs	r3, #12
 8005524:	6033      	str	r3, [r6, #0]
 8005526:	4630      	mov	r0, r6
 8005528:	f000 f80c 	bl	8005544 <__malloc_unlock>
 800552c:	e794      	b.n	8005458 <_malloc_r+0x20>
 800552e:	6005      	str	r5, [r0, #0]
 8005530:	e7d6      	b.n	80054e0 <_malloc_r+0xa8>
 8005532:	bf00      	nop
 8005534:	200003dc 	.word	0x200003dc

08005538 <__malloc_lock>:
 8005538:	4801      	ldr	r0, [pc, #4]	@ (8005540 <__malloc_lock+0x8>)
 800553a:	f7ff bf0f 	b.w	800535c <__retarget_lock_acquire_recursive>
 800553e:	bf00      	nop
 8005540:	200003d4 	.word	0x200003d4

08005544 <__malloc_unlock>:
 8005544:	4801      	ldr	r0, [pc, #4]	@ (800554c <__malloc_unlock+0x8>)
 8005546:	f7ff bf0a 	b.w	800535e <__retarget_lock_release_recursive>
 800554a:	bf00      	nop
 800554c:	200003d4 	.word	0x200003d4

08005550 <__ssputs_r>:
 8005550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005554:	688e      	ldr	r6, [r1, #8]
 8005556:	461f      	mov	r7, r3
 8005558:	42be      	cmp	r6, r7
 800555a:	680b      	ldr	r3, [r1, #0]
 800555c:	4682      	mov	sl, r0
 800555e:	460c      	mov	r4, r1
 8005560:	4690      	mov	r8, r2
 8005562:	d82d      	bhi.n	80055c0 <__ssputs_r+0x70>
 8005564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005568:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800556c:	d026      	beq.n	80055bc <__ssputs_r+0x6c>
 800556e:	6965      	ldr	r5, [r4, #20]
 8005570:	6909      	ldr	r1, [r1, #16]
 8005572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005576:	eba3 0901 	sub.w	r9, r3, r1
 800557a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800557e:	1c7b      	adds	r3, r7, #1
 8005580:	444b      	add	r3, r9
 8005582:	106d      	asrs	r5, r5, #1
 8005584:	429d      	cmp	r5, r3
 8005586:	bf38      	it	cc
 8005588:	461d      	movcc	r5, r3
 800558a:	0553      	lsls	r3, r2, #21
 800558c:	d527      	bpl.n	80055de <__ssputs_r+0x8e>
 800558e:	4629      	mov	r1, r5
 8005590:	f7ff ff52 	bl	8005438 <_malloc_r>
 8005594:	4606      	mov	r6, r0
 8005596:	b360      	cbz	r0, 80055f2 <__ssputs_r+0xa2>
 8005598:	6921      	ldr	r1, [r4, #16]
 800559a:	464a      	mov	r2, r9
 800559c:	f000 fae8 	bl	8005b70 <memcpy>
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	6126      	str	r6, [r4, #16]
 80055ae:	6165      	str	r5, [r4, #20]
 80055b0:	444e      	add	r6, r9
 80055b2:	eba5 0509 	sub.w	r5, r5, r9
 80055b6:	6026      	str	r6, [r4, #0]
 80055b8:	60a5      	str	r5, [r4, #8]
 80055ba:	463e      	mov	r6, r7
 80055bc:	42be      	cmp	r6, r7
 80055be:	d900      	bls.n	80055c2 <__ssputs_r+0x72>
 80055c0:	463e      	mov	r6, r7
 80055c2:	6820      	ldr	r0, [r4, #0]
 80055c4:	4632      	mov	r2, r6
 80055c6:	4641      	mov	r1, r8
 80055c8:	f000 faa8 	bl	8005b1c <memmove>
 80055cc:	68a3      	ldr	r3, [r4, #8]
 80055ce:	1b9b      	subs	r3, r3, r6
 80055d0:	60a3      	str	r3, [r4, #8]
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	4433      	add	r3, r6
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	2000      	movs	r0, #0
 80055da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055de:	462a      	mov	r2, r5
 80055e0:	f000 fad4 	bl	8005b8c <_realloc_r>
 80055e4:	4606      	mov	r6, r0
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d1e0      	bne.n	80055ac <__ssputs_r+0x5c>
 80055ea:	6921      	ldr	r1, [r4, #16]
 80055ec:	4650      	mov	r0, sl
 80055ee:	f7ff feb7 	bl	8005360 <_free_r>
 80055f2:	230c      	movs	r3, #12
 80055f4:	f8ca 3000 	str.w	r3, [sl]
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055fe:	81a3      	strh	r3, [r4, #12]
 8005600:	f04f 30ff 	mov.w	r0, #4294967295
 8005604:	e7e9      	b.n	80055da <__ssputs_r+0x8a>
	...

08005608 <_svfiprintf_r>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	4698      	mov	r8, r3
 800560e:	898b      	ldrh	r3, [r1, #12]
 8005610:	061b      	lsls	r3, r3, #24
 8005612:	b09d      	sub	sp, #116	@ 0x74
 8005614:	4607      	mov	r7, r0
 8005616:	460d      	mov	r5, r1
 8005618:	4614      	mov	r4, r2
 800561a:	d510      	bpl.n	800563e <_svfiprintf_r+0x36>
 800561c:	690b      	ldr	r3, [r1, #16]
 800561e:	b973      	cbnz	r3, 800563e <_svfiprintf_r+0x36>
 8005620:	2140      	movs	r1, #64	@ 0x40
 8005622:	f7ff ff09 	bl	8005438 <_malloc_r>
 8005626:	6028      	str	r0, [r5, #0]
 8005628:	6128      	str	r0, [r5, #16]
 800562a:	b930      	cbnz	r0, 800563a <_svfiprintf_r+0x32>
 800562c:	230c      	movs	r3, #12
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	b01d      	add	sp, #116	@ 0x74
 8005636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563a:	2340      	movs	r3, #64	@ 0x40
 800563c:	616b      	str	r3, [r5, #20]
 800563e:	2300      	movs	r3, #0
 8005640:	9309      	str	r3, [sp, #36]	@ 0x24
 8005642:	2320      	movs	r3, #32
 8005644:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005648:	f8cd 800c 	str.w	r8, [sp, #12]
 800564c:	2330      	movs	r3, #48	@ 0x30
 800564e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80057ec <_svfiprintf_r+0x1e4>
 8005652:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005656:	f04f 0901 	mov.w	r9, #1
 800565a:	4623      	mov	r3, r4
 800565c:	469a      	mov	sl, r3
 800565e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005662:	b10a      	cbz	r2, 8005668 <_svfiprintf_r+0x60>
 8005664:	2a25      	cmp	r2, #37	@ 0x25
 8005666:	d1f9      	bne.n	800565c <_svfiprintf_r+0x54>
 8005668:	ebba 0b04 	subs.w	fp, sl, r4
 800566c:	d00b      	beq.n	8005686 <_svfiprintf_r+0x7e>
 800566e:	465b      	mov	r3, fp
 8005670:	4622      	mov	r2, r4
 8005672:	4629      	mov	r1, r5
 8005674:	4638      	mov	r0, r7
 8005676:	f7ff ff6b 	bl	8005550 <__ssputs_r>
 800567a:	3001      	adds	r0, #1
 800567c:	f000 80a7 	beq.w	80057ce <_svfiprintf_r+0x1c6>
 8005680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005682:	445a      	add	r2, fp
 8005684:	9209      	str	r2, [sp, #36]	@ 0x24
 8005686:	f89a 3000 	ldrb.w	r3, [sl]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 809f 	beq.w	80057ce <_svfiprintf_r+0x1c6>
 8005690:	2300      	movs	r3, #0
 8005692:	f04f 32ff 	mov.w	r2, #4294967295
 8005696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800569a:	f10a 0a01 	add.w	sl, sl, #1
 800569e:	9304      	str	r3, [sp, #16]
 80056a0:	9307      	str	r3, [sp, #28]
 80056a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80056a8:	4654      	mov	r4, sl
 80056aa:	2205      	movs	r2, #5
 80056ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b0:	484e      	ldr	r0, [pc, #312]	@ (80057ec <_svfiprintf_r+0x1e4>)
 80056b2:	f7fa fdcd 	bl	8000250 <memchr>
 80056b6:	9a04      	ldr	r2, [sp, #16]
 80056b8:	b9d8      	cbnz	r0, 80056f2 <_svfiprintf_r+0xea>
 80056ba:	06d0      	lsls	r0, r2, #27
 80056bc:	bf44      	itt	mi
 80056be:	2320      	movmi	r3, #32
 80056c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056c4:	0711      	lsls	r1, r2, #28
 80056c6:	bf44      	itt	mi
 80056c8:	232b      	movmi	r3, #43	@ 0x2b
 80056ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80056ce:	f89a 3000 	ldrb.w	r3, [sl]
 80056d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80056d4:	d015      	beq.n	8005702 <_svfiprintf_r+0xfa>
 80056d6:	9a07      	ldr	r2, [sp, #28]
 80056d8:	4654      	mov	r4, sl
 80056da:	2000      	movs	r0, #0
 80056dc:	f04f 0c0a 	mov.w	ip, #10
 80056e0:	4621      	mov	r1, r4
 80056e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056e6:	3b30      	subs	r3, #48	@ 0x30
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	d94b      	bls.n	8005784 <_svfiprintf_r+0x17c>
 80056ec:	b1b0      	cbz	r0, 800571c <_svfiprintf_r+0x114>
 80056ee:	9207      	str	r2, [sp, #28]
 80056f0:	e014      	b.n	800571c <_svfiprintf_r+0x114>
 80056f2:	eba0 0308 	sub.w	r3, r0, r8
 80056f6:	fa09 f303 	lsl.w	r3, r9, r3
 80056fa:	4313      	orrs	r3, r2
 80056fc:	9304      	str	r3, [sp, #16]
 80056fe:	46a2      	mov	sl, r4
 8005700:	e7d2      	b.n	80056a8 <_svfiprintf_r+0xa0>
 8005702:	9b03      	ldr	r3, [sp, #12]
 8005704:	1d19      	adds	r1, r3, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	9103      	str	r1, [sp, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	bfbb      	ittet	lt
 800570e:	425b      	neglt	r3, r3
 8005710:	f042 0202 	orrlt.w	r2, r2, #2
 8005714:	9307      	strge	r3, [sp, #28]
 8005716:	9307      	strlt	r3, [sp, #28]
 8005718:	bfb8      	it	lt
 800571a:	9204      	strlt	r2, [sp, #16]
 800571c:	7823      	ldrb	r3, [r4, #0]
 800571e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005720:	d10a      	bne.n	8005738 <_svfiprintf_r+0x130>
 8005722:	7863      	ldrb	r3, [r4, #1]
 8005724:	2b2a      	cmp	r3, #42	@ 0x2a
 8005726:	d132      	bne.n	800578e <_svfiprintf_r+0x186>
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	1d1a      	adds	r2, r3, #4
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	9203      	str	r2, [sp, #12]
 8005730:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005734:	3402      	adds	r4, #2
 8005736:	9305      	str	r3, [sp, #20]
 8005738:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80057fc <_svfiprintf_r+0x1f4>
 800573c:	7821      	ldrb	r1, [r4, #0]
 800573e:	2203      	movs	r2, #3
 8005740:	4650      	mov	r0, sl
 8005742:	f7fa fd85 	bl	8000250 <memchr>
 8005746:	b138      	cbz	r0, 8005758 <_svfiprintf_r+0x150>
 8005748:	9b04      	ldr	r3, [sp, #16]
 800574a:	eba0 000a 	sub.w	r0, r0, sl
 800574e:	2240      	movs	r2, #64	@ 0x40
 8005750:	4082      	lsls	r2, r0
 8005752:	4313      	orrs	r3, r2
 8005754:	3401      	adds	r4, #1
 8005756:	9304      	str	r3, [sp, #16]
 8005758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800575c:	4824      	ldr	r0, [pc, #144]	@ (80057f0 <_svfiprintf_r+0x1e8>)
 800575e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005762:	2206      	movs	r2, #6
 8005764:	f7fa fd74 	bl	8000250 <memchr>
 8005768:	2800      	cmp	r0, #0
 800576a:	d036      	beq.n	80057da <_svfiprintf_r+0x1d2>
 800576c:	4b21      	ldr	r3, [pc, #132]	@ (80057f4 <_svfiprintf_r+0x1ec>)
 800576e:	bb1b      	cbnz	r3, 80057b8 <_svfiprintf_r+0x1b0>
 8005770:	9b03      	ldr	r3, [sp, #12]
 8005772:	3307      	adds	r3, #7
 8005774:	f023 0307 	bic.w	r3, r3, #7
 8005778:	3308      	adds	r3, #8
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577e:	4433      	add	r3, r6
 8005780:	9309      	str	r3, [sp, #36]	@ 0x24
 8005782:	e76a      	b.n	800565a <_svfiprintf_r+0x52>
 8005784:	fb0c 3202 	mla	r2, ip, r2, r3
 8005788:	460c      	mov	r4, r1
 800578a:	2001      	movs	r0, #1
 800578c:	e7a8      	b.n	80056e0 <_svfiprintf_r+0xd8>
 800578e:	2300      	movs	r3, #0
 8005790:	3401      	adds	r4, #1
 8005792:	9305      	str	r3, [sp, #20]
 8005794:	4619      	mov	r1, r3
 8005796:	f04f 0c0a 	mov.w	ip, #10
 800579a:	4620      	mov	r0, r4
 800579c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057a0:	3a30      	subs	r2, #48	@ 0x30
 80057a2:	2a09      	cmp	r2, #9
 80057a4:	d903      	bls.n	80057ae <_svfiprintf_r+0x1a6>
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0c6      	beq.n	8005738 <_svfiprintf_r+0x130>
 80057aa:	9105      	str	r1, [sp, #20]
 80057ac:	e7c4      	b.n	8005738 <_svfiprintf_r+0x130>
 80057ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80057b2:	4604      	mov	r4, r0
 80057b4:	2301      	movs	r3, #1
 80057b6:	e7f0      	b.n	800579a <_svfiprintf_r+0x192>
 80057b8:	ab03      	add	r3, sp, #12
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	462a      	mov	r2, r5
 80057be:	4b0e      	ldr	r3, [pc, #56]	@ (80057f8 <_svfiprintf_r+0x1f0>)
 80057c0:	a904      	add	r1, sp, #16
 80057c2:	4638      	mov	r0, r7
 80057c4:	f3af 8000 	nop.w
 80057c8:	1c42      	adds	r2, r0, #1
 80057ca:	4606      	mov	r6, r0
 80057cc:	d1d6      	bne.n	800577c <_svfiprintf_r+0x174>
 80057ce:	89ab      	ldrh	r3, [r5, #12]
 80057d0:	065b      	lsls	r3, r3, #25
 80057d2:	f53f af2d 	bmi.w	8005630 <_svfiprintf_r+0x28>
 80057d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057d8:	e72c      	b.n	8005634 <_svfiprintf_r+0x2c>
 80057da:	ab03      	add	r3, sp, #12
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	462a      	mov	r2, r5
 80057e0:	4b05      	ldr	r3, [pc, #20]	@ (80057f8 <_svfiprintf_r+0x1f0>)
 80057e2:	a904      	add	r1, sp, #16
 80057e4:	4638      	mov	r0, r7
 80057e6:	f000 f879 	bl	80058dc <_printf_i>
 80057ea:	e7ed      	b.n	80057c8 <_svfiprintf_r+0x1c0>
 80057ec:	08005cf8 	.word	0x08005cf8
 80057f0:	08005d02 	.word	0x08005d02
 80057f4:	00000000 	.word	0x00000000
 80057f8:	08005551 	.word	0x08005551
 80057fc:	08005cfe 	.word	0x08005cfe

08005800 <_printf_common>:
 8005800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005804:	4616      	mov	r6, r2
 8005806:	4698      	mov	r8, r3
 8005808:	688a      	ldr	r2, [r1, #8]
 800580a:	690b      	ldr	r3, [r1, #16]
 800580c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005810:	4293      	cmp	r3, r2
 8005812:	bfb8      	it	lt
 8005814:	4613      	movlt	r3, r2
 8005816:	6033      	str	r3, [r6, #0]
 8005818:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800581c:	4607      	mov	r7, r0
 800581e:	460c      	mov	r4, r1
 8005820:	b10a      	cbz	r2, 8005826 <_printf_common+0x26>
 8005822:	3301      	adds	r3, #1
 8005824:	6033      	str	r3, [r6, #0]
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	0699      	lsls	r1, r3, #26
 800582a:	bf42      	ittt	mi
 800582c:	6833      	ldrmi	r3, [r6, #0]
 800582e:	3302      	addmi	r3, #2
 8005830:	6033      	strmi	r3, [r6, #0]
 8005832:	6825      	ldr	r5, [r4, #0]
 8005834:	f015 0506 	ands.w	r5, r5, #6
 8005838:	d106      	bne.n	8005848 <_printf_common+0x48>
 800583a:	f104 0a19 	add.w	sl, r4, #25
 800583e:	68e3      	ldr	r3, [r4, #12]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	42ab      	cmp	r3, r5
 8005846:	dc26      	bgt.n	8005896 <_printf_common+0x96>
 8005848:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	3b00      	subs	r3, #0
 8005850:	bf18      	it	ne
 8005852:	2301      	movne	r3, #1
 8005854:	0692      	lsls	r2, r2, #26
 8005856:	d42b      	bmi.n	80058b0 <_printf_common+0xb0>
 8005858:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800585c:	4641      	mov	r1, r8
 800585e:	4638      	mov	r0, r7
 8005860:	47c8      	blx	r9
 8005862:	3001      	adds	r0, #1
 8005864:	d01e      	beq.n	80058a4 <_printf_common+0xa4>
 8005866:	6823      	ldr	r3, [r4, #0]
 8005868:	6922      	ldr	r2, [r4, #16]
 800586a:	f003 0306 	and.w	r3, r3, #6
 800586e:	2b04      	cmp	r3, #4
 8005870:	bf02      	ittt	eq
 8005872:	68e5      	ldreq	r5, [r4, #12]
 8005874:	6833      	ldreq	r3, [r6, #0]
 8005876:	1aed      	subeq	r5, r5, r3
 8005878:	68a3      	ldr	r3, [r4, #8]
 800587a:	bf0c      	ite	eq
 800587c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005880:	2500      	movne	r5, #0
 8005882:	4293      	cmp	r3, r2
 8005884:	bfc4      	itt	gt
 8005886:	1a9b      	subgt	r3, r3, r2
 8005888:	18ed      	addgt	r5, r5, r3
 800588a:	2600      	movs	r6, #0
 800588c:	341a      	adds	r4, #26
 800588e:	42b5      	cmp	r5, r6
 8005890:	d11a      	bne.n	80058c8 <_printf_common+0xc8>
 8005892:	2000      	movs	r0, #0
 8005894:	e008      	b.n	80058a8 <_printf_common+0xa8>
 8005896:	2301      	movs	r3, #1
 8005898:	4652      	mov	r2, sl
 800589a:	4641      	mov	r1, r8
 800589c:	4638      	mov	r0, r7
 800589e:	47c8      	blx	r9
 80058a0:	3001      	adds	r0, #1
 80058a2:	d103      	bne.n	80058ac <_printf_common+0xac>
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ac:	3501      	adds	r5, #1
 80058ae:	e7c6      	b.n	800583e <_printf_common+0x3e>
 80058b0:	18e1      	adds	r1, r4, r3
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	2030      	movs	r0, #48	@ 0x30
 80058b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058ba:	4422      	add	r2, r4
 80058bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058c4:	3302      	adds	r3, #2
 80058c6:	e7c7      	b.n	8005858 <_printf_common+0x58>
 80058c8:	2301      	movs	r3, #1
 80058ca:	4622      	mov	r2, r4
 80058cc:	4641      	mov	r1, r8
 80058ce:	4638      	mov	r0, r7
 80058d0:	47c8      	blx	r9
 80058d2:	3001      	adds	r0, #1
 80058d4:	d0e6      	beq.n	80058a4 <_printf_common+0xa4>
 80058d6:	3601      	adds	r6, #1
 80058d8:	e7d9      	b.n	800588e <_printf_common+0x8e>
	...

080058dc <_printf_i>:
 80058dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	7e0f      	ldrb	r7, [r1, #24]
 80058e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058e4:	2f78      	cmp	r7, #120	@ 0x78
 80058e6:	4691      	mov	r9, r2
 80058e8:	4680      	mov	r8, r0
 80058ea:	460c      	mov	r4, r1
 80058ec:	469a      	mov	sl, r3
 80058ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058f2:	d807      	bhi.n	8005904 <_printf_i+0x28>
 80058f4:	2f62      	cmp	r7, #98	@ 0x62
 80058f6:	d80a      	bhi.n	800590e <_printf_i+0x32>
 80058f8:	2f00      	cmp	r7, #0
 80058fa:	f000 80d2 	beq.w	8005aa2 <_printf_i+0x1c6>
 80058fe:	2f58      	cmp	r7, #88	@ 0x58
 8005900:	f000 80b9 	beq.w	8005a76 <_printf_i+0x19a>
 8005904:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005908:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800590c:	e03a      	b.n	8005984 <_printf_i+0xa8>
 800590e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005912:	2b15      	cmp	r3, #21
 8005914:	d8f6      	bhi.n	8005904 <_printf_i+0x28>
 8005916:	a101      	add	r1, pc, #4	@ (adr r1, 800591c <_printf_i+0x40>)
 8005918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800591c:	08005975 	.word	0x08005975
 8005920:	08005989 	.word	0x08005989
 8005924:	08005905 	.word	0x08005905
 8005928:	08005905 	.word	0x08005905
 800592c:	08005905 	.word	0x08005905
 8005930:	08005905 	.word	0x08005905
 8005934:	08005989 	.word	0x08005989
 8005938:	08005905 	.word	0x08005905
 800593c:	08005905 	.word	0x08005905
 8005940:	08005905 	.word	0x08005905
 8005944:	08005905 	.word	0x08005905
 8005948:	08005a89 	.word	0x08005a89
 800594c:	080059b3 	.word	0x080059b3
 8005950:	08005a43 	.word	0x08005a43
 8005954:	08005905 	.word	0x08005905
 8005958:	08005905 	.word	0x08005905
 800595c:	08005aab 	.word	0x08005aab
 8005960:	08005905 	.word	0x08005905
 8005964:	080059b3 	.word	0x080059b3
 8005968:	08005905 	.word	0x08005905
 800596c:	08005905 	.word	0x08005905
 8005970:	08005a4b 	.word	0x08005a4b
 8005974:	6833      	ldr	r3, [r6, #0]
 8005976:	1d1a      	adds	r2, r3, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6032      	str	r2, [r6, #0]
 800597c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005980:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005984:	2301      	movs	r3, #1
 8005986:	e09d      	b.n	8005ac4 <_printf_i+0x1e8>
 8005988:	6833      	ldr	r3, [r6, #0]
 800598a:	6820      	ldr	r0, [r4, #0]
 800598c:	1d19      	adds	r1, r3, #4
 800598e:	6031      	str	r1, [r6, #0]
 8005990:	0606      	lsls	r6, r0, #24
 8005992:	d501      	bpl.n	8005998 <_printf_i+0xbc>
 8005994:	681d      	ldr	r5, [r3, #0]
 8005996:	e003      	b.n	80059a0 <_printf_i+0xc4>
 8005998:	0645      	lsls	r5, r0, #25
 800599a:	d5fb      	bpl.n	8005994 <_printf_i+0xb8>
 800599c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059a0:	2d00      	cmp	r5, #0
 80059a2:	da03      	bge.n	80059ac <_printf_i+0xd0>
 80059a4:	232d      	movs	r3, #45	@ 0x2d
 80059a6:	426d      	negs	r5, r5
 80059a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059ac:	4859      	ldr	r0, [pc, #356]	@ (8005b14 <_printf_i+0x238>)
 80059ae:	230a      	movs	r3, #10
 80059b0:	e011      	b.n	80059d6 <_printf_i+0xfa>
 80059b2:	6821      	ldr	r1, [r4, #0]
 80059b4:	6833      	ldr	r3, [r6, #0]
 80059b6:	0608      	lsls	r0, r1, #24
 80059b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059bc:	d402      	bmi.n	80059c4 <_printf_i+0xe8>
 80059be:	0649      	lsls	r1, r1, #25
 80059c0:	bf48      	it	mi
 80059c2:	b2ad      	uxthmi	r5, r5
 80059c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80059c6:	4853      	ldr	r0, [pc, #332]	@ (8005b14 <_printf_i+0x238>)
 80059c8:	6033      	str	r3, [r6, #0]
 80059ca:	bf14      	ite	ne
 80059cc:	230a      	movne	r3, #10
 80059ce:	2308      	moveq	r3, #8
 80059d0:	2100      	movs	r1, #0
 80059d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059d6:	6866      	ldr	r6, [r4, #4]
 80059d8:	60a6      	str	r6, [r4, #8]
 80059da:	2e00      	cmp	r6, #0
 80059dc:	bfa2      	ittt	ge
 80059de:	6821      	ldrge	r1, [r4, #0]
 80059e0:	f021 0104 	bicge.w	r1, r1, #4
 80059e4:	6021      	strge	r1, [r4, #0]
 80059e6:	b90d      	cbnz	r5, 80059ec <_printf_i+0x110>
 80059e8:	2e00      	cmp	r6, #0
 80059ea:	d04b      	beq.n	8005a84 <_printf_i+0x1a8>
 80059ec:	4616      	mov	r6, r2
 80059ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80059f2:	fb03 5711 	mls	r7, r3, r1, r5
 80059f6:	5dc7      	ldrb	r7, [r0, r7]
 80059f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059fc:	462f      	mov	r7, r5
 80059fe:	42bb      	cmp	r3, r7
 8005a00:	460d      	mov	r5, r1
 8005a02:	d9f4      	bls.n	80059ee <_printf_i+0x112>
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	d10b      	bne.n	8005a20 <_printf_i+0x144>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	07df      	lsls	r7, r3, #31
 8005a0c:	d508      	bpl.n	8005a20 <_printf_i+0x144>
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	6861      	ldr	r1, [r4, #4]
 8005a12:	4299      	cmp	r1, r3
 8005a14:	bfde      	ittt	le
 8005a16:	2330      	movle	r3, #48	@ 0x30
 8005a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a20:	1b92      	subs	r2, r2, r6
 8005a22:	6122      	str	r2, [r4, #16]
 8005a24:	f8cd a000 	str.w	sl, [sp]
 8005a28:	464b      	mov	r3, r9
 8005a2a:	aa03      	add	r2, sp, #12
 8005a2c:	4621      	mov	r1, r4
 8005a2e:	4640      	mov	r0, r8
 8005a30:	f7ff fee6 	bl	8005800 <_printf_common>
 8005a34:	3001      	adds	r0, #1
 8005a36:	d14a      	bne.n	8005ace <_printf_i+0x1f2>
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	b004      	add	sp, #16
 8005a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a42:	6823      	ldr	r3, [r4, #0]
 8005a44:	f043 0320 	orr.w	r3, r3, #32
 8005a48:	6023      	str	r3, [r4, #0]
 8005a4a:	4833      	ldr	r0, [pc, #204]	@ (8005b18 <_printf_i+0x23c>)
 8005a4c:	2778      	movs	r7, #120	@ 0x78
 8005a4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	6831      	ldr	r1, [r6, #0]
 8005a56:	061f      	lsls	r7, r3, #24
 8005a58:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a5c:	d402      	bmi.n	8005a64 <_printf_i+0x188>
 8005a5e:	065f      	lsls	r7, r3, #25
 8005a60:	bf48      	it	mi
 8005a62:	b2ad      	uxthmi	r5, r5
 8005a64:	6031      	str	r1, [r6, #0]
 8005a66:	07d9      	lsls	r1, r3, #31
 8005a68:	bf44      	itt	mi
 8005a6a:	f043 0320 	orrmi.w	r3, r3, #32
 8005a6e:	6023      	strmi	r3, [r4, #0]
 8005a70:	b11d      	cbz	r5, 8005a7a <_printf_i+0x19e>
 8005a72:	2310      	movs	r3, #16
 8005a74:	e7ac      	b.n	80059d0 <_printf_i+0xf4>
 8005a76:	4827      	ldr	r0, [pc, #156]	@ (8005b14 <_printf_i+0x238>)
 8005a78:	e7e9      	b.n	8005a4e <_printf_i+0x172>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	f023 0320 	bic.w	r3, r3, #32
 8005a80:	6023      	str	r3, [r4, #0]
 8005a82:	e7f6      	b.n	8005a72 <_printf_i+0x196>
 8005a84:	4616      	mov	r6, r2
 8005a86:	e7bd      	b.n	8005a04 <_printf_i+0x128>
 8005a88:	6833      	ldr	r3, [r6, #0]
 8005a8a:	6825      	ldr	r5, [r4, #0]
 8005a8c:	6961      	ldr	r1, [r4, #20]
 8005a8e:	1d18      	adds	r0, r3, #4
 8005a90:	6030      	str	r0, [r6, #0]
 8005a92:	062e      	lsls	r6, r5, #24
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	d501      	bpl.n	8005a9c <_printf_i+0x1c0>
 8005a98:	6019      	str	r1, [r3, #0]
 8005a9a:	e002      	b.n	8005aa2 <_printf_i+0x1c6>
 8005a9c:	0668      	lsls	r0, r5, #25
 8005a9e:	d5fb      	bpl.n	8005a98 <_printf_i+0x1bc>
 8005aa0:	8019      	strh	r1, [r3, #0]
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	6123      	str	r3, [r4, #16]
 8005aa6:	4616      	mov	r6, r2
 8005aa8:	e7bc      	b.n	8005a24 <_printf_i+0x148>
 8005aaa:	6833      	ldr	r3, [r6, #0]
 8005aac:	1d1a      	adds	r2, r3, #4
 8005aae:	6032      	str	r2, [r6, #0]
 8005ab0:	681e      	ldr	r6, [r3, #0]
 8005ab2:	6862      	ldr	r2, [r4, #4]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f7fa fbca 	bl	8000250 <memchr>
 8005abc:	b108      	cbz	r0, 8005ac2 <_printf_i+0x1e6>
 8005abe:	1b80      	subs	r0, r0, r6
 8005ac0:	6060      	str	r0, [r4, #4]
 8005ac2:	6863      	ldr	r3, [r4, #4]
 8005ac4:	6123      	str	r3, [r4, #16]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005acc:	e7aa      	b.n	8005a24 <_printf_i+0x148>
 8005ace:	6923      	ldr	r3, [r4, #16]
 8005ad0:	4632      	mov	r2, r6
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	4640      	mov	r0, r8
 8005ad6:	47d0      	blx	sl
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d0ad      	beq.n	8005a38 <_printf_i+0x15c>
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	079b      	lsls	r3, r3, #30
 8005ae0:	d413      	bmi.n	8005b0a <_printf_i+0x22e>
 8005ae2:	68e0      	ldr	r0, [r4, #12]
 8005ae4:	9b03      	ldr	r3, [sp, #12]
 8005ae6:	4298      	cmp	r0, r3
 8005ae8:	bfb8      	it	lt
 8005aea:	4618      	movlt	r0, r3
 8005aec:	e7a6      	b.n	8005a3c <_printf_i+0x160>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4632      	mov	r2, r6
 8005af2:	4649      	mov	r1, r9
 8005af4:	4640      	mov	r0, r8
 8005af6:	47d0      	blx	sl
 8005af8:	3001      	adds	r0, #1
 8005afa:	d09d      	beq.n	8005a38 <_printf_i+0x15c>
 8005afc:	3501      	adds	r5, #1
 8005afe:	68e3      	ldr	r3, [r4, #12]
 8005b00:	9903      	ldr	r1, [sp, #12]
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	42ab      	cmp	r3, r5
 8005b06:	dcf2      	bgt.n	8005aee <_printf_i+0x212>
 8005b08:	e7eb      	b.n	8005ae2 <_printf_i+0x206>
 8005b0a:	2500      	movs	r5, #0
 8005b0c:	f104 0619 	add.w	r6, r4, #25
 8005b10:	e7f5      	b.n	8005afe <_printf_i+0x222>
 8005b12:	bf00      	nop
 8005b14:	08005d09 	.word	0x08005d09
 8005b18:	08005d1a 	.word	0x08005d1a

08005b1c <memmove>:
 8005b1c:	4288      	cmp	r0, r1
 8005b1e:	b510      	push	{r4, lr}
 8005b20:	eb01 0402 	add.w	r4, r1, r2
 8005b24:	d902      	bls.n	8005b2c <memmove+0x10>
 8005b26:	4284      	cmp	r4, r0
 8005b28:	4623      	mov	r3, r4
 8005b2a:	d807      	bhi.n	8005b3c <memmove+0x20>
 8005b2c:	1e43      	subs	r3, r0, #1
 8005b2e:	42a1      	cmp	r1, r4
 8005b30:	d008      	beq.n	8005b44 <memmove+0x28>
 8005b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b3a:	e7f8      	b.n	8005b2e <memmove+0x12>
 8005b3c:	4402      	add	r2, r0
 8005b3e:	4601      	mov	r1, r0
 8005b40:	428a      	cmp	r2, r1
 8005b42:	d100      	bne.n	8005b46 <memmove+0x2a>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b4e:	e7f7      	b.n	8005b40 <memmove+0x24>

08005b50 <_sbrk_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d06      	ldr	r5, [pc, #24]	@ (8005b6c <_sbrk_r+0x1c>)
 8005b54:	2300      	movs	r3, #0
 8005b56:	4604      	mov	r4, r0
 8005b58:	4608      	mov	r0, r1
 8005b5a:	602b      	str	r3, [r5, #0]
 8005b5c:	f7fb fc92 	bl	8001484 <_sbrk>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_sbrk_r+0x1a>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_sbrk_r+0x1a>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	200003d0 	.word	0x200003d0

08005b70 <memcpy>:
 8005b70:	440a      	add	r2, r1
 8005b72:	4291      	cmp	r1, r2
 8005b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	4770      	bx	lr
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d1f9      	bne.n	8005b7e <memcpy+0xe>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <_realloc_r>:
 8005b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b90:	4680      	mov	r8, r0
 8005b92:	4615      	mov	r5, r2
 8005b94:	460c      	mov	r4, r1
 8005b96:	b921      	cbnz	r1, 8005ba2 <_realloc_r+0x16>
 8005b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	f7ff bc4b 	b.w	8005438 <_malloc_r>
 8005ba2:	b92a      	cbnz	r2, 8005bb0 <_realloc_r+0x24>
 8005ba4:	f7ff fbdc 	bl	8005360 <_free_r>
 8005ba8:	2400      	movs	r4, #0
 8005baa:	4620      	mov	r0, r4
 8005bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bb0:	f000 f81a 	bl	8005be8 <_malloc_usable_size_r>
 8005bb4:	4285      	cmp	r5, r0
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	d802      	bhi.n	8005bc0 <_realloc_r+0x34>
 8005bba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005bbe:	d8f4      	bhi.n	8005baa <_realloc_r+0x1e>
 8005bc0:	4629      	mov	r1, r5
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	f7ff fc38 	bl	8005438 <_malloc_r>
 8005bc8:	4607      	mov	r7, r0
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d0ec      	beq.n	8005ba8 <_realloc_r+0x1c>
 8005bce:	42b5      	cmp	r5, r6
 8005bd0:	462a      	mov	r2, r5
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	bf28      	it	cs
 8005bd6:	4632      	movcs	r2, r6
 8005bd8:	f7ff ffca 	bl	8005b70 <memcpy>
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4640      	mov	r0, r8
 8005be0:	f7ff fbbe 	bl	8005360 <_free_r>
 8005be4:	463c      	mov	r4, r7
 8005be6:	e7e0      	b.n	8005baa <_realloc_r+0x1e>

08005be8 <_malloc_usable_size_r>:
 8005be8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bec:	1f18      	subs	r0, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfbc      	itt	lt
 8005bf2:	580b      	ldrlt	r3, [r1, r0]
 8005bf4:	18c0      	addlt	r0, r0, r3
 8005bf6:	4770      	bx	lr

08005bf8 <_init>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	bf00      	nop
 8005bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bfe:	bc08      	pop	{r3}
 8005c00:	469e      	mov	lr, r3
 8005c02:	4770      	bx	lr

08005c04 <_fini>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr
